/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * RuleSet.h
 *
 * Schema rule set
 */

#ifndef RuleSet_H_
#define RuleSet_H_


#include "Rule.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Schema rule set
/// </summary>
class  RuleSet
{
public:
    RuleSet();
    virtual ~RuleSet() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const RuleSet& rhs) const;
    bool operator!=(const RuleSet& rhs) const;

    /////////////////////////////////////////////
    /// RuleSet members

    /// <summary>
    /// 
    /// </summary>
    std::vector<org::openapitools::server::model::Rule> getMigrationRules() const;
    void setMigrationRules(std::vector<org::openapitools::server::model::Rule> const& value);
    bool migrationRulesIsSet() const;
    void unsetMigrationRules();
    /// <summary>
    /// 
    /// </summary>
    std::vector<org::openapitools::server::model::Rule> getDomainRules() const;
    void setDomainRules(std::vector<org::openapitools::server::model::Rule> const& value);
    bool domainRulesIsSet() const;
    void unsetDomainRules();
    /// <summary>
    /// 
    /// </summary>
    bool isEmpty() const;
    void setEmpty(bool const value);
    bool emptyIsSet() const;
    void unsetEmpty();

    friend  void to_json(nlohmann::json& j, const RuleSet& o);
    friend  void from_json(const nlohmann::json& j, RuleSet& o);
protected:
    std::vector<org::openapitools::server::model::Rule> m_MigrationRules;
    bool m_MigrationRulesIsSet;
    std::vector<org::openapitools::server::model::Rule> m_DomainRules;
    bool m_DomainRulesIsSet;
    bool m_Empty;
    bool m_EmptyIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* RuleSet_H_ */
