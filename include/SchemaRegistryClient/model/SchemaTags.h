/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * SchemaTags.h
 *
 * 
 */

#ifndef SchemaTags_H_
#define SchemaTags_H_


#include <string>
#include "SchemaEntity.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  SchemaTags
{
public:
    SchemaTags();
    virtual ~SchemaTags() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const SchemaTags& rhs) const;
    bool operator!=(const SchemaTags& rhs) const;

    /////////////////////////////////////////////
    /// SchemaTags members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::SchemaEntity getSchemaEntity() const;
    void setSchemaEntity(org::openapitools::server::model::SchemaEntity const& value);
    bool schemaEntityIsSet() const;
    void unsetSchemaEntity();
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string> getTags() const;
    void setTags(std::vector<std::string> const& value);
    bool tagsIsSet() const;
    void unsetTags();

    friend  void to_json(nlohmann::json& j, const SchemaTags& o);
    friend  void from_json(const nlohmann::json& j, SchemaTags& o);
protected:
    org::openapitools::server::model::SchemaEntity m_SchemaEntity;
    bool m_SchemaEntityIsSet;
    std::vector<std::string> m_Tags;
    bool m_TagsIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* SchemaTags_H_ */
