/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Rule.h
 *
 * Rule
 */

#ifndef Rule_H_
#define Rule_H_


#include <string>
#include <map>
#include <set>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// Rule
/// </summary>
class  Rule
{
public:
    Rule();
    virtual ~Rule() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const Rule& rhs) const;
    bool operator!=(const Rule& rhs) const;

    /////////////////////////////////////////////
    /// Rule members

    /// <summary>
    /// Rule name
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// Rule doc
    /// </summary>
    std::string getDoc() const;
    void setDoc(std::string const& value);
    bool docIsSet() const;
    void unsetDoc();
    /// <summary>
    /// Rule kind
    /// </summary>
    std::string getKind() const;
    void setKind(std::string const& value);
    bool kindIsSet() const;
    void unsetKind();
    /// <summary>
    /// Rule mode
    /// </summary>
    std::string getMode() const;
    void setMode(std::string const& value);
    bool modeIsSet() const;
    void unsetMode();
    /// <summary>
    /// Rule type
    /// </summary>
    std::string getType() const;
    void setType(std::string const& value);
    bool typeIsSet() const;
    void unsetType();
    /// <summary>
    /// The tags to which this rule applies
    /// </summary>
    std::set<std::string> getTags() const;
    void setTags(std::set<std::string> const& value);
    bool tagsIsSet() const;
    void unsetTags();
    /// <summary>
    /// Optional params for the rule
    /// </summary>
    std::map<std::string, std::string> getParams() const;
    void setParams(std::map<std::string, std::string> const& value);
    bool paramsIsSet() const;
    void unsetParams();
    /// <summary>
    /// Rule expression
    /// </summary>
    std::string getExpr() const;
    void setExpr(std::string const& value);
    bool exprIsSet() const;
    void unsetExpr();
    /// <summary>
    /// Rule action on success
    /// </summary>
    std::string getOnSuccess() const;
    void setOnSuccess(std::string const& value);
    bool onSuccessIsSet() const;
    void unsetOnSuccess();
    /// <summary>
    /// Rule action on failure
    /// </summary>
    std::string getOnFailure() const;
    void setOnFailure(std::string const& value);
    bool onFailureIsSet() const;
    void unsetOnFailure();
    /// <summary>
    /// Whether the rule is disabled
    /// </summary>
    bool isDisabled() const;
    void setDisabled(bool const value);
    bool disabledIsSet() const;
    void unsetDisabled();

    friend  void to_json(nlohmann::json& j, const Rule& o);
    friend  void from_json(const nlohmann::json& j, Rule& o);
protected:
    std::string m_Name;
    bool m_NameIsSet;
    std::string m_Doc;
    bool m_DocIsSet;
    std::string m_Kind;
    bool m_KindIsSet;
    std::string m_Mode;
    bool m_ModeIsSet;
    std::string m_Type;
    bool m_TypeIsSet;
    std::set<std::string> m_Tags;
    bool m_TagsIsSet;
    std::map<std::string, std::string> m_Params;
    bool m_ParamsIsSet;
    std::string m_Expr;
    bool m_ExprIsSet;
    std::string m_OnSuccess;
    bool m_OnSuccessIsSet;
    std::string m_OnFailure;
    bool m_OnFailureIsSet;
    bool m_Disabled;
    bool m_DisabledIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* Rule_H_ */
