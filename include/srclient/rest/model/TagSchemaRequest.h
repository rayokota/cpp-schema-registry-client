/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * TagSchemaRequest.h
 *
 * Schema tags register request
 */

#ifndef TagSchemaRequest_H_
#define TagSchemaRequest_H_


#include <string>
#include "Metadata.h"
#include "SchemaTags.h"
#include "RuleSet.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace srclient::rest::model
{

/// <summary>
/// Schema tags register request
/// </summary>
class  TagSchemaRequest
{
public:
    TagSchemaRequest();
    virtual ~TagSchemaRequest() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const TagSchemaRequest& rhs) const;
    bool operator!=(const TagSchemaRequest& rhs) const;

    /////////////////////////////////////////////
    /// TagSchemaRequest members

    /// <summary>
    /// The new version should be the latest version in the subject + 1. If set, the new version will be encoded to the schema metadata.
    /// </summary>
    int32_t getNewVersion() const;
    void setNewVersion(int32_t const value);
    bool newVersionIsSet() const;
    void unsetNewVersion();
    /// <summary>
    /// 
    /// </summary>
    std::vector<srclient::rest::model::SchemaTags> getTagsToAdd() const;
    void setTagsToAdd(std::vector<srclient::rest::model::SchemaTags> const& value);
    bool tagsToAddIsSet() const;
    void unsetTagsToAdd();
    /// <summary>
    /// 
    /// </summary>
    std::vector<srclient::rest::model::SchemaTags> getTagsToRemove() const;
    void setTagsToRemove(std::vector<srclient::rest::model::SchemaTags> const& value);
    bool tagsToRemoveIsSet() const;
    void unsetTagsToRemove();
    /// <summary>
    /// 
    /// </summary>
    srclient::rest::model::Metadata getMetadata() const;
    void setMetadata(srclient::rest::model::Metadata const& value);
    bool metadataIsSet() const;
    void unsetMetadata();
    /// <summary>
    /// 
    /// </summary>
    srclient::rest::model::RuleSet getRuleSet() const;
    void setRuleSet(srclient::rest::model::RuleSet const& value);
    bool ruleSetIsSet() const;
    void unsetRuleSet();
    /// <summary>
    /// 
    /// </summary>
    srclient::rest::model::RuleSet getRulesToMerge() const;
    void setRulesToMerge(srclient::rest::model::RuleSet const& value);
    bool rulesToMergeIsSet() const;
    void unsetRulesToMerge();
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string> getRulesToRemove() const;
    void setRulesToRemove(std::vector<std::string> const& value);
    bool rulesToRemoveIsSet() const;
    void unsetRulesToRemove();

    friend  void to_json(nlohmann::json& j, const TagSchemaRequest& o);
    friend  void from_json(const nlohmann::json& j, TagSchemaRequest& o);
protected:
    int32_t m_NewVersion;
    bool m_NewVersionIsSet;
    std::vector<srclient::rest::model::SchemaTags> m_TagsToAdd;
    bool m_TagsToAddIsSet;
    std::vector<srclient::rest::model::SchemaTags> m_TagsToRemove;
    bool m_TagsToRemoveIsSet;
    srclient::rest::model::Metadata m_Metadata;
    bool m_MetadataIsSet;
    srclient::rest::model::RuleSet m_RuleSet;
    bool m_RuleSetIsSet;
    srclient::rest::model::RuleSet m_RulesToMerge;
    bool m_RulesToMergeIsSet;
    std::vector<std::string> m_RulesToRemove;
    bool m_RulesToRemoveIsSet;
    
};

} // namespace srclient::rest::model

#endif /* TagSchemaRequest_H_ */
