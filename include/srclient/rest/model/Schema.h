/**
 * Confluent Schema Registry
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * Schema.h
 *
 * Schema
 */

#pragma once

#include <nlohmann/json.hpp>
#include <optional>
#include <string>
#include <vector>

#include "Metadata.h"
#include "RuleSet.h"
#include "SchemaReference.h"

namespace srclient::rest::model {

/// <summary>
/// Schema
/// </summary>
class Schema {
  public:
    Schema();
    virtual ~Schema() = default;

    bool operator==(const Schema &rhs) const;
    bool operator!=(const Schema &rhs) const;

    /////////////////////////////////////////////
    /// Schema members

    /// <summary>
    /// Schema type
    /// </summary>
    std::optional<std::string> getSchemaType() const;
    void setSchemaType(const std::optional<std::string> &value);
    /// <summary>
    /// References to other schemas
    /// </summary>
    std::optional<std::vector<srclient::rest::model::SchemaReference>>
    getReferences() const;
    void setReferences(
        const std::optional<std::vector<srclient::rest::model::SchemaReference>>
            &value);
    /// <summary>
    ///
    /// </summary>
    std::optional<srclient::rest::model::Metadata> getMetadata() const;
    void setMetadata(
        const std::optional<srclient::rest::model::Metadata> &value);
    /// <summary>
    ///
    /// </summary>
    std::optional<srclient::rest::model::RuleSet> getRuleSet() const;
    void setRuleSet(const std::optional<srclient::rest::model::RuleSet> &value);
    /// <summary>
    /// Schema definition string
    /// </summary>
    std::optional<std::string> getSchema() const;
    void setSchema(const std::optional<std::string> &value);

    friend void to_json(nlohmann::json &j, const Schema &o);
    friend void from_json(const nlohmann::json &j, Schema &o);

  protected:
    std::optional<std::string> schemaType_;
    std::optional<std::vector<srclient::rest::model::SchemaReference>>
        references_;
    std::optional<srclient::rest::model::Metadata> metadata_;
    std::optional<srclient::rest::model::RuleSet> ruleSet_;
    std::optional<std::string> schema_;
};

}  // namespace srclient::rest::model
