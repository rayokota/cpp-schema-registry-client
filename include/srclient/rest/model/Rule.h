/**
 * Confluent Schema Registry
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * Rule.h
 *
 * Rule
 */

#pragma once

#include <map>
#include <nlohmann/json.hpp>
#include <optional>
#include <string>
#include <vector>

namespace srclient::rest::model {

enum class Kind {
    Transform,
    Condition,
};

enum class Phase {
    Migration,
    Domain,
    Encoding,
};

enum class Mode {
    Upgrade,
    Downgrade,
    UpDown,
    Write,
    Read,
    WriteRead,
};

/// <summary>
/// Rule
/// </summary>
class Rule {
  public:
    Rule();
    virtual ~Rule() = default;

    bool operator==(const Rule &rhs) const;
    bool operator!=(const Rule &rhs) const;

    /////////////////////////////////////////////
    /// Rule members

    /// <summary>
    /// Rule name
    /// </summary>
    std::optional<std::string> getName() const;
    void setName(const std::optional<std::string> &value);
    /// <summary>
    /// Rule doc
    /// </summary>
    std::optional<std::string> getDoc() const;
    void setDoc(const std::optional<std::string> &value);
    /// <summary>
    /// Rule kind
    /// </summary>
    std::optional<Kind> getKind() const;
    void setKind(const std::optional<Kind> &value);
    /// <summary>
    /// Rule mode
    /// </summary>
    std::optional<Mode> getMode() const;
    void setMode(const std::optional<Mode> &value);
    /// <summary>
    /// Rule type
    /// </summary>
    std::optional<std::string> getType() const;
    void setType(const std::optional<std::string> &value);
    /// <summary>
    /// The tags to which this rule applies
    /// </summary>
    std::optional<std::vector<std::string>> getTags() const;
    void setTags(const std::optional<std::vector<std::string>> &value);
    /// <summary>
    /// Optional params for the rule
    /// </summary>
    std::optional<std::map<std::string, std::string>> getParams() const;
    void setParams(
        const std::optional<std::map<std::string, std::string>> &value);
    /// <summary>
    /// Rule expression
    /// </summary>
    std::optional<std::string> getExpr() const;
    void setExpr(const std::optional<std::string> &value);
    /// <summary>
    /// Rule action on success
    /// </summary>
    std::optional<std::string> getOnSuccess() const;
    void setOnSuccess(const std::optional<std::string> &value);
    /// <summary>
    /// Rule action on failure
    /// </summary>
    std::optional<std::string> getOnFailure() const;
    void setOnFailure(const std::optional<std::string> &value);
    /// <summary>
    /// Whether the rule is disabled
    /// </summary>
    std::optional<bool> isDisabled() const;
    void setDisabled(const std::optional<bool> &value);

    friend void to_json(nlohmann::json &j, const Rule &o);
    friend void from_json(const nlohmann::json &j, Rule &o);

  protected:
    std::optional<std::string> name_;
    std::optional<std::string> doc_;
    std::optional<Kind> kind_;
    std::optional<Mode> mode_;
    std::optional<std::string> type_;
    std::optional<std::vector<std::string>> tags_;
    std::optional<std::map<std::string, std::string>> params_;
    std::optional<std::string> expr_;
    std::optional<std::string> onSuccess_;
    std::optional<std::string> onFailure_;
    std::optional<bool> disabled_;
};

}  // namespace srclient::rest::model
