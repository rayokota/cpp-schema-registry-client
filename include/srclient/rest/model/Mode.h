/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * Mode.h
 *
 * Schema Registry operating mode
 */

#ifndef Mode_H_
#define Mode_H_


#include <string>
#include <nlohmann/json.hpp>

namespace srclient::rest::model
{

/// <summary>
/// Schema Registry operating mode
/// </summary>
class  Mode
{
public:
    Mode();
    virtual ~Mode() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const Mode& rhs) const;
    bool operator!=(const Mode& rhs) const;

    /////////////////////////////////////////////
    /// Mode members

    /// <summary>
    /// Schema Registry operating mode
    /// </summary>
    std::string getMode() const;
    void setMode(std::string const& value);
    bool modeIsSet() const;
    void unsetMode();

    friend  void to_json(nlohmann::json& j, const Mode& o);
    friend  void from_json(const nlohmann::json& j, Mode& o);
protected:
    std::string m_Mode;
    bool m_ModeIsSet;
    
};

} // namespace srclient::rest::model

#endif /* Mode_H_ */
