/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * SchemaReference.h
 *
 * Schema reference
 */

#ifndef SchemaReference_H_
#define SchemaReference_H_


#include <string>
#include <nlohmann/json.hpp>

namespace srclient::rest::model
{

/// <summary>
/// Schema reference
/// </summary>
class  SchemaReference
{
public:
    SchemaReference();
    virtual ~SchemaReference() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const SchemaReference& rhs) const;
    bool operator!=(const SchemaReference& rhs) const;

    /////////////////////////////////////////////
    /// SchemaReference members

    /// <summary>
    /// Reference name
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// Name of the referenced subject
    /// </summary>
    std::string getSubject() const;
    void setSubject(std::string const& value);
    bool subjectIsSet() const;
    void unsetSubject();
    /// <summary>
    /// Version number of the referenced subject
    /// </summary>
    int32_t getVersion() const;
    void setVersion(int32_t const value);
    bool versionIsSet() const;
    void unsetVersion();

    friend  void to_json(nlohmann::json& j, const SchemaReference& o);
    friend  void from_json(const nlohmann::json& j, SchemaReference& o);
protected:
    std::string m_Name;
    bool m_NameIsSet;
    std::string m_Subject;
    bool m_SubjectIsSet;
    int32_t m_Version;
    bool m_VersionIsSet;
    
};

} // namespace srclient::rest::model

#endif /* SchemaReference_H_ */
