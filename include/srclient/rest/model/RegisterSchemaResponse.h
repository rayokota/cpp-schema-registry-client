/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * RegisterSchemaResponse.h
 *
 * Schema register response
 */

#ifndef RegisterSchemaResponse_H_
#define RegisterSchemaResponse_H_


#include "SchemaReference.h"
#include <string>
#include "Metadata.h"
#include "RuleSet.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace srclient::rest::model
{

/// <summary>
/// Schema register response
/// </summary>
class  RegisterSchemaResponse
{
public:
    RegisterSchemaResponse();
    virtual ~RegisterSchemaResponse() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const RegisterSchemaResponse& rhs) const;
    bool operator!=(const RegisterSchemaResponse& rhs) const;

    /////////////////////////////////////////////
    /// RegisterSchemaResponse members

    /// <summary>
    /// Identifier of the schema
    /// </summary>
    int32_t getId() const;
    void setId(int32_t const value);
    bool idIsSet() const;
    void unsetId();
    /// <summary>
    /// Globally unique identifier of the schema
    /// </summary>
    std::string getGuid() const;
    void setGuid(std::string const& value);
    bool guidIsSet() const;
    void unsetGuid();
    /// <summary>
    /// Subject
    /// </summary>
    std::string getSubject() const;
    void setSubject(std::string const& value);
    bool subjectIsSet() const;
    void unsetSubject();
    /// <summary>
    /// Version number
    /// </summary>
    int32_t getVersion() const;
    void setVersion(int32_t const value);
    bool versionIsSet() const;
    void unsetVersion();
    /// <summary>
    /// Schema type
    /// </summary>
    std::string getSchemaType() const;
    void setSchemaType(std::string const& value);
    bool schemaTypeIsSet() const;
    void unsetSchemaType();
    /// <summary>
    /// References to other schemas
    /// </summary>
    std::vector<srclient::rest::model::SchemaReference> getReferences() const;
    void setReferences(std::vector<srclient::rest::model::SchemaReference> const& value);
    bool referencesIsSet() const;
    void unsetReferences();
    /// <summary>
    /// 
    /// </summary>
    srclient::rest::model::Metadata getMetadata() const;
    void setMetadata(srclient::rest::model::Metadata const& value);
    bool metadataIsSet() const;
    void unsetMetadata();
    /// <summary>
    /// 
    /// </summary>
    srclient::rest::model::RuleSet getRuleSet() const;
    void setRuleSet(srclient::rest::model::RuleSet const& value);
    bool ruleSetIsSet() const;
    void unsetRuleSet();
    /// <summary>
    /// Schema definition string
    /// </summary>
    std::string getSchema() const;
    void setSchema(std::string const& value);
    bool schemaIsSet() const;
    void unsetSchema();

    friend  void to_json(nlohmann::json& j, const RegisterSchemaResponse& o);
    friend  void from_json(const nlohmann::json& j, RegisterSchemaResponse& o);
protected:
    int32_t m_Id;
    bool m_IdIsSet;
    std::string m_Guid;
    bool m_GuidIsSet;
    std::string m_Subject;
    bool m_SubjectIsSet;
    int32_t m_Version;
    bool m_VersionIsSet;
    std::string m_SchemaType;
    bool m_SchemaTypeIsSet;
    std::vector<srclient::rest::model::SchemaReference> m_References;
    bool m_ReferencesIsSet;
    srclient::rest::model::Metadata m_Metadata;
    bool m_MetadataIsSet;
    srclient::rest::model::RuleSet m_RuleSet;
    bool m_RuleSetIsSet;
    std::string m_Schema;
    bool m_SchemaIsSet;
    
};

} // namespace srclient::rest::model

#endif /* RegisterSchemaResponse_H_ */
