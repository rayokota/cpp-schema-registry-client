/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * CompatibilityCheckResponse.h
 *
 * Compatibility check response
 */

#ifndef CompatibilityCheckResponse_H_
#define CompatibilityCheckResponse_H_


#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace srclient::rest::model
{

/// <summary>
/// Compatibility check response
/// </summary>
class  CompatibilityCheckResponse
{
public:
    CompatibilityCheckResponse();
    virtual ~CompatibilityCheckResponse() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const CompatibilityCheckResponse& rhs) const;
    bool operator!=(const CompatibilityCheckResponse& rhs) const;

    /////////////////////////////////////////////
    /// CompatibilityCheckResponse members

    /// <summary>
    /// Whether the compared schemas are compatible
    /// </summary>
    bool isIsCompatible() const;
    void setIsCompatible(bool const value);
    bool isCompatibleIsSet() const;
    void unsetIs_compatible();
    /// <summary>
    /// Error messages
    /// </summary>
    std::vector<std::string> getMessages() const;
    void setMessages(std::vector<std::string> const& value);
    bool messagesIsSet() const;
    void unsetMessages();

    friend  void to_json(nlohmann::json& j, const CompatibilityCheckResponse& o);
    friend  void from_json(const nlohmann::json& j, CompatibilityCheckResponse& o);
protected:
    bool m_Is_compatible;
    bool m_Is_compatibleIsSet;
    std::vector<std::string> m_Messages;
    bool m_MessagesIsSet;
    
};

}

#endif /* CompatibilityCheckResponse_H_ */
