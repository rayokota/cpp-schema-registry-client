/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "srclient/rest/model/RegisteredSchema.h"

#include <sstream>

namespace srclient::rest::model
{

RegisteredSchema::RegisteredSchema()
{
    // Optional members are initialized to std::nullopt by default
}

RegisteredSchema::RegisteredSchema(
        const std::optional<int32_t>& id,
        const std::optional<std::string>& guid,
        const std::optional<std::string>& subject,
        const std::optional<int32_t>& version,
        const Schema& schema) : m_Id(id), m_Guid(guid), m_Subject(subject), m_Version(version),
        m_SchemaType(schema.getSchemaType()), m_References(schema.getReferences()),
        m_Metadata(schema.getMetadata()), m_RuleSet(schema.getRuleSet()),
        m_Schema(schema.getSchema())
{
}

bool RegisteredSchema::operator==(const RegisteredSchema& rhs) const
{
    return
        m_Id == rhs.m_Id &&
        m_Guid == rhs.m_Guid &&
        m_Subject == rhs.m_Subject &&
        m_Version == rhs.m_Version &&
        m_SchemaType == rhs.m_SchemaType &&
        m_References == rhs.m_References &&
        m_Metadata == rhs.m_Metadata &&
        m_RuleSet == rhs.m_RuleSet &&
        m_Schema == rhs.m_Schema;
}

bool RegisteredSchema::operator!=(const RegisteredSchema& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RegisteredSchema& o)
{
    j = nlohmann::json::object();
    if(o.m_Id.has_value())
        j["id"] = o.m_Id.value();
    if(o.m_Guid.has_value())
        j["guid"] = o.m_Guid.value();
    if(o.m_Subject.has_value())
        j["subject"] = o.m_Subject.value();
    if(o.m_Version.has_value())
        j["version"] = o.m_Version.value();
    if(o.m_SchemaType.has_value())
        j["schemaType"] = o.m_SchemaType.value();
    if(o.m_References.has_value())
        j["references"] = o.m_References.value();
    if(o.m_Metadata.has_value())
        j["metadata"] = o.m_Metadata.value();
    if(o.m_RuleSet.has_value())
        j["ruleSet"] = o.m_RuleSet.value();
    if(o.m_Schema.has_value())
        j["schema"] = o.m_Schema.value();
}

void from_json(const nlohmann::json& j, RegisteredSchema& o)
{
    if(j.find("id") != j.end())
    {
        int32_t temp;
        j.at("id").get_to(temp);
        o.m_Id = temp;
    } 
    if(j.find("guid") != j.end())
    {
        std::string temp;
        j.at("guid").get_to(temp);
        o.m_Guid = temp;
    } 
    if(j.find("subject") != j.end())
    {
        std::string temp;
        j.at("subject").get_to(temp);
        o.m_Subject = temp;
    } 
    if(j.find("version") != j.end())
    {
        int32_t temp;
        j.at("version").get_to(temp);
        o.m_Version = temp;
    } 
    if(j.find("schemaType") != j.end())
    {
        std::string temp;
        j.at("schemaType").get_to(temp);
        o.m_SchemaType = temp;
    } 
    if(j.find("references") != j.end())
    {
        std::vector<srclient::rest::model::SchemaReference> temp;
        j.at("references").get_to(temp);
        o.m_References = temp;
    } 
    if(j.find("metadata") != j.end())
    {
        srclient::rest::model::Metadata temp;
        j.at("metadata").get_to(temp);
        o.m_Metadata = temp;
    } 
    if(j.find("ruleSet") != j.end())
    {
        srclient::rest::model::RuleSet temp;
        j.at("ruleSet").get_to(temp);
        o.m_RuleSet = temp;
    } 
    if(j.find("schema") != j.end())
    {
        std::string temp;
        j.at("schema").get_to(temp);
        o.m_Schema = temp;
    } 
}

std::optional<int32_t> RegisteredSchema::getId() const
{
    return m_Id;
}

void RegisteredSchema::setId(const std::optional<int32_t>& value)
{
    m_Id = value;
}

std::optional<std::string> RegisteredSchema::getGuid() const
{
    return m_Guid;
}

void RegisteredSchema::setGuid(const std::optional<std::string>& value)
{
    m_Guid = value;
}

std::optional<std::string> RegisteredSchema::getSubject() const
{
    return m_Subject;
}

void RegisteredSchema::setSubject(const std::optional<std::string>& value)
{
    m_Subject = value;
}

std::optional<int32_t> RegisteredSchema::getVersion() const
{
    return m_Version;
}

void RegisteredSchema::setVersion(const std::optional<int32_t>& value)
{
    m_Version = value;
}

std::optional<std::string> RegisteredSchema::getSchemaType() const
{
    return m_SchemaType;
}

void RegisteredSchema::setSchemaType(const std::optional<std::string>& value)
{
    m_SchemaType = value;
}

std::optional<std::vector<srclient::rest::model::SchemaReference>> RegisteredSchema::getReferences() const
{
    return m_References;
}

void RegisteredSchema::setReferences(const std::optional<std::vector<srclient::rest::model::SchemaReference>>& value)
{
    m_References = value;
}

std::optional<srclient::rest::model::Metadata> RegisteredSchema::getMetadata() const
{
    return m_Metadata;
}

void RegisteredSchema::setMetadata(const std::optional<srclient::rest::model::Metadata>& value)
{
    m_Metadata = value;
}

std::optional<srclient::rest::model::RuleSet> RegisteredSchema::getRuleSet() const
{
    return m_RuleSet;
}

void RegisteredSchema::setRuleSet(const std::optional<srclient::rest::model::RuleSet>& value)
{
    m_RuleSet = value;
}

std::optional<std::string> RegisteredSchema::getSchema() const
{
    return m_Schema;
}

void RegisteredSchema::setSchema(const std::optional<std::string>& value)
{
    m_Schema = value;
}

Schema RegisteredSchema::toSchema() const
{
    Schema schema;
    schema.setSchemaType(m_SchemaType);
    schema.setReferences(m_References);
    schema.setMetadata(m_Metadata);
    schema.setRuleSet(m_RuleSet);
    schema.setSchema(m_Schema);
    return schema;
}

} // namespace srclient::rest::model

