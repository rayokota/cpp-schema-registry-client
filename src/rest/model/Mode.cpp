/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "srclient/rest/model/Mode.h"
#include "srclient/rest/model/Helpers.h"

#include <sstream>

namespace srclient::rest::model
{

Mode::Mode()
{
    m_Mode = "";
    m_ModeIsSet = false;
    
}

void Mode::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw srclient::rest::model::ValidationException(msg.str());
    }
}

bool Mode::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Mode::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Mode" : pathPrefix;

        
    return success;
}

bool Mode::operator==(const Mode& rhs) const
{
    return
    
    
    
    ((!modeIsSet() && !rhs.modeIsSet()) || (modeIsSet() && rhs.modeIsSet() && getMode() == rhs.getMode()))
    
    ;
}

bool Mode::operator!=(const Mode& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Mode& o)
{
    j = nlohmann::json::object();
    if(o.modeIsSet())
        j["mode"] = o.m_Mode;
    
}

void from_json(const nlohmann::json& j, Mode& o)
{
    if(j.find("mode") != j.end())
    {
        j.at("mode").get_to(o.m_Mode);
        o.m_ModeIsSet = true;
    } 
    
}

std::string Mode::getMode() const
{
    return m_Mode;
}
void Mode::setMode(std::string const& value)
{
    m_Mode = value;
    m_ModeIsSet = true;
}
bool Mode::modeIsSet() const
{
    return m_ModeIsSet;
}
void Mode::unsetMode()
{
    m_ModeIsSet = false;
}


} // namespace srclient::rest::model

