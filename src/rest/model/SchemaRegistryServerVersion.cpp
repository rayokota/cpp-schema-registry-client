/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "srclient/rest/model/SchemaRegistryServerVersion.h"
#include "srclient/rest/model/Helpers.h"

#include <sstream>

namespace srclient::rest::model
{

SchemaRegistryServerVersion::SchemaRegistryServerVersion()
{
    m_Version = "";
    m_VersionIsSet = false;
    m_CommitId = "";
    m_CommitIdIsSet = false;
    
}

void SchemaRegistryServerVersion::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw srclient::rest::model::ValidationException(msg.str());
    }
}

bool SchemaRegistryServerVersion::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool SchemaRegistryServerVersion::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "SchemaRegistryServerVersion" : pathPrefix;

            
    return success;
}

bool SchemaRegistryServerVersion::operator==(const SchemaRegistryServerVersion& rhs) const
{
    return
    
    
    
    ((!versionIsSet() && !rhs.versionIsSet()) || (versionIsSet() && rhs.versionIsSet() && getVersion() == rhs.getVersion())) &&
    
    
    ((!commitIdIsSet() && !rhs.commitIdIsSet()) || (commitIdIsSet() && rhs.commitIdIsSet() && getCommitId() == rhs.getCommitId()))
    
    ;
}

bool SchemaRegistryServerVersion::operator!=(const SchemaRegistryServerVersion& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SchemaRegistryServerVersion& o)
{
    j = nlohmann::json::object();
    if(o.versionIsSet())
        j["version"] = o.m_Version;
    if(o.commitIdIsSet())
        j["commitId"] = o.m_CommitId;
    
}

void from_json(const nlohmann::json& j, SchemaRegistryServerVersion& o)
{
    if(j.find("version") != j.end())
    {
        j.at("version").get_to(o.m_Version);
        o.m_VersionIsSet = true;
    } 
    if(j.find("commitId") != j.end())
    {
        j.at("commitId").get_to(o.m_CommitId);
        o.m_CommitIdIsSet = true;
    } 
    
}

std::string SchemaRegistryServerVersion::getVersion() const
{
    return m_Version;
}
void SchemaRegistryServerVersion::setVersion(std::string const& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}
bool SchemaRegistryServerVersion::versionIsSet() const
{
    return m_VersionIsSet;
}
void SchemaRegistryServerVersion::unsetVersion()
{
    m_VersionIsSet = false;
}
std::string SchemaRegistryServerVersion::getCommitId() const
{
    return m_CommitId;
}
void SchemaRegistryServerVersion::setCommitId(std::string const& value)
{
    m_CommitId = value;
    m_CommitIdIsSet = true;
}
bool SchemaRegistryServerVersion::commitIdIsSet() const
{
    return m_CommitIdIsSet;
}
void SchemaRegistryServerVersion::unsetCommitId()
{
    m_CommitIdIsSet = false;
}


} // namespace srclient::rest::model

