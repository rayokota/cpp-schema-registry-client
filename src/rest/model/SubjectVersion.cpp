/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "srclient/rest/model/SubjectVersion.h"
#include "srclient/rest/model/Helpers.h"

#include <sstream>

namespace srclient::rest::model
{

SubjectVersion::SubjectVersion()
{
    m_Subject = "";
    m_SubjectIsSet = false;
    m_Version = 0;
    m_VersionIsSet = false;
    
}

void SubjectVersion::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw srclient::rest::model::ValidationException(msg.str());
    }
}

bool SubjectVersion::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool SubjectVersion::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "SubjectVersion" : pathPrefix;

            
    return success;
}

bool SubjectVersion::operator==(const SubjectVersion& rhs) const
{
    return
    
    
    
    ((!subjectIsSet() && !rhs.subjectIsSet()) || (subjectIsSet() && rhs.subjectIsSet() && getSubject() == rhs.getSubject())) &&
    
    
    ((!versionIsSet() && !rhs.versionIsSet()) || (versionIsSet() && rhs.versionIsSet() && getVersion() == rhs.getVersion()))
    
    ;
}

bool SubjectVersion::operator!=(const SubjectVersion& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SubjectVersion& o)
{
    j = nlohmann::json::object();
    if(o.subjectIsSet())
        j["subject"] = o.m_Subject;
    if(o.versionIsSet())
        j["version"] = o.m_Version;
    
}

void from_json(const nlohmann::json& j, SubjectVersion& o)
{
    if(j.find("subject") != j.end())
    {
        j.at("subject").get_to(o.m_Subject);
        o.m_SubjectIsSet = true;
    } 
    if(j.find("version") != j.end())
    {
        j.at("version").get_to(o.m_Version);
        o.m_VersionIsSet = true;
    } 
    
}

std::string SubjectVersion::getSubject() const
{
    return m_Subject;
}
void SubjectVersion::setSubject(std::string const& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}
bool SubjectVersion::subjectIsSet() const
{
    return m_SubjectIsSet;
}
void SubjectVersion::unsetSubject()
{
    m_SubjectIsSet = false;
}
int32_t SubjectVersion::getVersion() const
{
    return m_Version;
}
void SubjectVersion::setVersion(int32_t const value)
{
    m_Version = value;
    m_VersionIsSet = true;
}
bool SubjectVersion::versionIsSet() const
{
    return m_VersionIsSet;
}
void SubjectVersion::unsetVersion()
{
    m_VersionIsSet = false;
}


} // namespace srclient::rest::model

