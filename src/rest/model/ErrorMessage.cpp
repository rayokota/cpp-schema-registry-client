/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "srclient/rest/model/ErrorMessage.h"
#include "srclient/rest/model/Helpers.h"

#include <sstream>

namespace srclient::rest::model
{

ErrorMessage::ErrorMessage()
{
    m_Error_code = 0;
    m_Error_codeIsSet = false;
    m_Message = "";
    m_MessageIsSet = false;
    
}

void ErrorMessage::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw srclient::rest::model::ValidationException(msg.str());
    }
}

bool ErrorMessage::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ErrorMessage::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ErrorMessage" : pathPrefix;

            
    return success;
}

bool ErrorMessage::operator==(const ErrorMessage& rhs) const
{
    return
    
    
    
    ((!errorCodeIsSet() && !rhs.errorCodeIsSet()) || (errorCodeIsSet() && rhs.errorCodeIsSet() && getErrorCode() == rhs.getErrorCode())) &&
    
    
    ((!messageIsSet() && !rhs.messageIsSet()) || (messageIsSet() && rhs.messageIsSet() && getMessage() == rhs.getMessage()))
    
    ;
}

bool ErrorMessage::operator!=(const ErrorMessage& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ErrorMessage& o)
{
    j = nlohmann::json::object();
    if(o.errorCodeIsSet())
        j["error_code"] = o.m_Error_code;
    if(o.messageIsSet())
        j["message"] = o.m_Message;
    
}

void from_json(const nlohmann::json& j, ErrorMessage& o)
{
    if(j.find("error_code") != j.end())
    {
        j.at("error_code").get_to(o.m_Error_code);
        o.m_Error_codeIsSet = true;
    } 
    if(j.find("message") != j.end())
    {
        j.at("message").get_to(o.m_Message);
        o.m_MessageIsSet = true;
    } 
    
}

int32_t ErrorMessage::getErrorCode() const
{
    return m_Error_code;
}
void ErrorMessage::setErrorCode(int32_t const value)
{
    m_Error_code = value;
    m_Error_codeIsSet = true;
}
bool ErrorMessage::errorCodeIsSet() const
{
    return m_Error_codeIsSet;
}
void ErrorMessage::unsetError_code()
{
    m_Error_codeIsSet = false;
}
std::string ErrorMessage::getMessage() const
{
    return m_Message;
}
void ErrorMessage::setMessage(std::string const& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}
bool ErrorMessage::messageIsSet() const
{
    return m_MessageIsSet;
}
void ErrorMessage::unsetMessage()
{
    m_MessageIsSet = false;
}


} // namespace srclient::rest::model

