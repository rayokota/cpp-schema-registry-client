/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "srclient/rest/model/Schema.h"

#include <sstream>

namespace srclient::rest::model
{

Schema::Schema()
{
    // Optional members are initialized to std::nullopt by default
}

bool Schema::operator==(const Schema& rhs) const
{
    return
        m_SchemaType == rhs.m_SchemaType &&
        m_References == rhs.m_References &&
        m_Metadata == rhs.m_Metadata &&
        m_RuleSet == rhs.m_RuleSet &&
        m_Schema == rhs.m_Schema;
}

bool Schema::operator!=(const Schema& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Schema& o)
{
    j = nlohmann::json::object();
    if(o.m_SchemaType.has_value())
        j["schemaType"] = o.m_SchemaType.value();
    if(o.m_References.has_value())
        j["references"] = o.m_References.value();
    if(o.m_Metadata.has_value())
        j["metadata"] = o.m_Metadata.value();
    if(o.m_RuleSet.has_value())
        j["ruleSet"] = o.m_RuleSet.value();
    if(o.m_Schema.has_value())
        j["schema"] = o.m_Schema.value();
}

void from_json(const nlohmann::json& j, Schema& o)
{
    if(j.find("schemaType") != j.end())
    {
        std::string temp;
        j.at("schemaType").get_to(temp);
        o.m_SchemaType = temp;
    } 
    if(j.find("references") != j.end())
    {
        std::vector<srclient::rest::model::SchemaReference> temp;
        j.at("references").get_to(temp);
        o.m_References = temp;
    } 
    if(j.find("metadata") != j.end())
    {
        srclient::rest::model::Metadata temp;
        j.at("metadata").get_to(temp);
        o.m_Metadata = temp;
    } 
    if(j.find("ruleSet") != j.end())
    {
        srclient::rest::model::RuleSet temp;
        j.at("ruleSet").get_to(temp);
        o.m_RuleSet = temp;
    } 
    if(j.find("schema") != j.end())
    {
        std::string temp;
        j.at("schema").get_to(temp);
        o.m_Schema = temp;
    } 
}

std::optional<std::string> Schema::getSchemaType() const
{
    return m_SchemaType;
}

void Schema::setSchemaType(const std::optional<std::string>& value)
{
    m_SchemaType = value;
}

std::optional<std::vector<srclient::rest::model::SchemaReference>> Schema::getReferences() const
{
    return m_References;
}

void Schema::setReferences(const std::optional<std::vector<srclient::rest::model::SchemaReference>>& value)
{
    m_References = value;
}

std::optional<srclient::rest::model::Metadata> Schema::getMetadata() const
{
    return m_Metadata;
}

void Schema::setMetadata(const std::optional<srclient::rest::model::Metadata>& value)
{
    m_Metadata = value;
}

std::optional<srclient::rest::model::RuleSet> Schema::getRuleSet() const
{
    return m_RuleSet;
}

void Schema::setRuleSet(const std::optional<srclient::rest::model::RuleSet>& value)
{
    m_RuleSet = value;
}

std::optional<std::string> Schema::getSchema() const
{
    return m_Schema;
}

void Schema::setSchema(const std::optional<std::string>& value)
{
    m_Schema = value;
}

} // namespace srclient::rest::model

