/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "srclient/rest/model/Schema.h"

#include <sstream>

namespace srclient::rest::model
{

Schema::Schema()
{
    // Optional members are initialized to std::nullopt by default
}

bool Schema::operator==(const Schema& rhs) const
{
    return
        schemaType_ == rhs.schemaType_ &&
        references_ == rhs.references_ &&
        metadata_ == rhs.metadata_ &&
        ruleSet_ == rhs.ruleSet_ &&
        schema_ == rhs.schema_;
}

bool Schema::operator!=(const Schema& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Schema& o)
{
    j = nlohmann::json::object();
    if(o.schemaType_.has_value())
        j["schemaType"] = o.schemaType_.value();
    if(o.references_.has_value())
        j["references"] = o.references_.value();
    if(o.metadata_.has_value())
        j["metadata"] = o.metadata_.value();
    if(o.ruleSet_.has_value())
        j["ruleSet"] = o.ruleSet_.value();
    if(o.schema_.has_value())
        j["schema"] = o.schema_.value();
}

void from_json(const nlohmann::json& j, Schema& o)
{
    if(j.find("schemaType") != j.end())
    {
        std::string temp;
        j.at("schemaType").get_to(temp);
        o.schemaType_ = temp;
    } 
    if(j.find("references") != j.end())
    {
        std::vector<srclient::rest::model::SchemaReference> temp;
        j.at("references").get_to(temp);
        o.references_ = temp;
    } 
    if(j.find("metadata") != j.end())
    {
        srclient::rest::model::Metadata temp;
        j.at("metadata").get_to(temp);
        o.metadata_ = temp;
    } 
    if(j.find("ruleSet") != j.end())
    {
        srclient::rest::model::RuleSet temp;
        j.at("ruleSet").get_to(temp);
        o.ruleSet_ = temp;
    } 
    if(j.find("schema") != j.end())
    {
        std::string temp;
        j.at("schema").get_to(temp);
        o.schema_ = temp;
    } 
}

std::optional<std::string> Schema::getSchemaType() const
{
    return schemaType_;
}

void Schema::setSchemaType(const std::optional<std::string>& value)
{
    schemaType_ = value;
}

std::optional<std::vector<srclient::rest::model::SchemaReference>> Schema::getReferences() const
{
    return references_;
}

void Schema::setReferences(const std::optional<std::vector<srclient::rest::model::SchemaReference>>& value)
{
    references_ = value;
}

std::optional<srclient::rest::model::Metadata> Schema::getMetadata() const
{
    return metadata_;
}

void Schema::setMetadata(const std::optional<srclient::rest::model::Metadata>& value)
{
    metadata_ = value;
}

std::optional<srclient::rest::model::RuleSet> Schema::getRuleSet() const
{
    return ruleSet_;
}

void Schema::setRuleSet(const std::optional<srclient::rest::model::RuleSet>& value)
{
    ruleSet_ = value;
}

std::optional<std::string> Schema::getSchema() const
{
    return schema_;
}

void Schema::setSchema(const std::optional<std::string>& value)
{
    schema_ = value;
}

} // namespace srclient::rest::model

