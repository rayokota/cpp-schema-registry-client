/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "srclient/rest/model/CompatibilityCheckResponse.h"
#include "srclient/rest/model/Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CompatibilityCheckResponse::CompatibilityCheckResponse()
{
    m_Is_compatible = false;
    m_Is_compatibleIsSet = false;
    m_MessagesIsSet = false;
    
}

void CompatibilityCheckResponse::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CompatibilityCheckResponse::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CompatibilityCheckResponse::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CompatibilityCheckResponse" : pathPrefix;

             
    if (messagesIsSet())
    {
        const std::vector<std::string>& value = m_Messages;
        const std::string currentValuePath = _pathPrefix + ".messages";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool CompatibilityCheckResponse::operator==(const CompatibilityCheckResponse& rhs) const
{
    return
    
    
    
    ((!isCompatibleIsSet() && !rhs.isCompatibleIsSet()) || (isCompatibleIsSet() && rhs.isCompatibleIsSet() && isIsCompatible() == rhs.isIsCompatible())) &&
    
    
    ((!messagesIsSet() && !rhs.messagesIsSet()) || (messagesIsSet() && rhs.messagesIsSet() && getMessages() == rhs.getMessages()))
    
    ;
}

bool CompatibilityCheckResponse::operator!=(const CompatibilityCheckResponse& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CompatibilityCheckResponse& o)
{
    j = nlohmann::json::object();
    if(o.isCompatibleIsSet())
        j["is_compatible"] = o.m_Is_compatible;
    if(o.messagesIsSet() || !o.m_Messages.empty())
        j["messages"] = o.m_Messages;
    
}

void from_json(const nlohmann::json& j, CompatibilityCheckResponse& o)
{
    if(j.find("is_compatible") != j.end())
    {
        j.at("is_compatible").get_to(o.m_Is_compatible);
        o.m_Is_compatibleIsSet = true;
    } 
    if(j.find("messages") != j.end())
    {
        j.at("messages").get_to(o.m_Messages);
        o.m_MessagesIsSet = true;
    } 
    
}

bool CompatibilityCheckResponse::isIsCompatible() const
{
    return m_Is_compatible;
}
void CompatibilityCheckResponse::setIsCompatible(bool const value)
{
    m_Is_compatible = value;
    m_Is_compatibleIsSet = true;
}
bool CompatibilityCheckResponse::isCompatibleIsSet() const
{
    return m_Is_compatibleIsSet;
}
void CompatibilityCheckResponse::unsetIs_compatible()
{
    m_Is_compatibleIsSet = false;
}
std::vector<std::string> CompatibilityCheckResponse::getMessages() const
{
    return m_Messages;
}
void CompatibilityCheckResponse::setMessages(std::vector<std::string> const& value)
{
    m_Messages = value;
    m_MessagesIsSet = true;
}
bool CompatibilityCheckResponse::messagesIsSet() const
{
    return m_MessagesIsSet;
}
void CompatibilityCheckResponse::unsetMessages()
{
    m_MessagesIsSet = false;
}


} // namespace org::openapitools::server::model

