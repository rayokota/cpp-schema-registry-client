/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "srclient/rest/model/Metadata.h"
#include "srclient/rest/model/Helpers.h"

#include <sstream>

namespace srclient::rest::model
{

Metadata::Metadata()
{
    m_TagsIsSet = false;
    m_PropertiesIsSet = false;
    m_SensitiveIsSet = false;
    
}

void Metadata::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw srclient::rest::model::ValidationException(msg.str());
    }
}

bool Metadata::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Metadata::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Metadata" : pathPrefix;

                 
    if (sensitiveIsSet())
    {
        const std::set<std::string>& value = m_Sensitive;
        const std::string currentValuePath = _pathPrefix + ".sensitive";
                
        
        if (!srclient::rest::model::hasOnlyUniqueItems(value))
        {
            success = false;
            msg << currentValuePath << ": may not contain the same item more than once;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool Metadata::operator==(const Metadata& rhs) const
{
    return
    
    
    
    ((!tagsIsSet() && !rhs.tagsIsSet()) || (tagsIsSet() && rhs.tagsIsSet() && getTags() == rhs.getTags())) &&
    
    
    ((!propertiesIsSet() && !rhs.propertiesIsSet()) || (propertiesIsSet() && rhs.propertiesIsSet() && getProperties() == rhs.getProperties())) &&
    
    
    ((!sensitiveIsSet() && !rhs.sensitiveIsSet()) || (sensitiveIsSet() && rhs.sensitiveIsSet() && getSensitive() == rhs.getSensitive()))
    
    ;
}

bool Metadata::operator!=(const Metadata& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Metadata& o)
{
    j = nlohmann::json::object();
    if(o.tagsIsSet() || !o.m_Tags.empty())
        j["tags"] = o.m_Tags;
    if(o.propertiesIsSet() || !o.m_Properties.empty())
        j["properties"] = o.m_Properties;
    if(o.sensitiveIsSet() || !o.m_Sensitive.empty())
        j["sensitive"] = o.m_Sensitive;
    
}

void from_json(const nlohmann::json& j, Metadata& o)
{
    if(j.find("tags") != j.end())
    {
        j.at("tags").get_to(o.m_Tags);
        o.m_TagsIsSet = true;
    } 
    if(j.find("properties") != j.end())
    {
        j.at("properties").get_to(o.m_Properties);
        o.m_PropertiesIsSet = true;
    } 
    if(j.find("sensitive") != j.end())
    {
        j.at("sensitive").get_to(o.m_Sensitive);
        o.m_SensitiveIsSet = true;
    } 
    
}

std::map<std::string, std::set<std::string>> Metadata::getTags() const
{
    return m_Tags;
}
void Metadata::setTags(std::map<std::string, std::set<std::string>> const& value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}
bool Metadata::tagsIsSet() const
{
    return m_TagsIsSet;
}
void Metadata::unsetTags()
{
    m_TagsIsSet = false;
}
std::map<std::string, std::string> Metadata::getProperties() const
{
    return m_Properties;
}
void Metadata::setProperties(std::map<std::string, std::string> const& value)
{
    m_Properties = value;
    m_PropertiesIsSet = true;
}
bool Metadata::propertiesIsSet() const
{
    return m_PropertiesIsSet;
}
void Metadata::unsetProperties()
{
    m_PropertiesIsSet = false;
}
std::set<std::string> Metadata::getSensitive() const
{
    return m_Sensitive;
}
void Metadata::setSensitive(std::set<std::string> const& value)
{
    m_Sensitive = value;
    m_SensitiveIsSet = true;
}
bool Metadata::sensitiveIsSet() const
{
    return m_SensitiveIsSet;
}
void Metadata::unsetSensitive()
{
    m_SensitiveIsSet = false;
}


} // namespace srclient::rest::model

