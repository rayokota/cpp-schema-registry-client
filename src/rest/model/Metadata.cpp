/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "srclient/rest/model/Metadata.h"

#include <sstream>

namespace srclient::rest::model
{

Metadata::Metadata()
{
    // Optional members are initialized to std::nullopt by default
}

bool Metadata::operator==(const Metadata& rhs) const
{
    return
        tags_ == rhs.tags_ &&
        properties_ == rhs.properties_ &&
        sensitive_ == rhs.sensitive_;
}

bool Metadata::operator!=(const Metadata& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Metadata& o)
{
    j = nlohmann::json::object();
    if(o.tags_.has_value())
        j["tags"] = o.tags_.value();
    if(o.properties_.has_value())
        j["properties"] = o.properties_.value();
    if(o.sensitive_.has_value())
        j["sensitive"] = o.sensitive_.value();
}

void from_json(const nlohmann::json& j, Metadata& o)
{
    if(j.find("tags") != j.end())
    {
        std::map<std::string, std::vector<std::string>> temp;
        j.at("tags").get_to(temp);
        o.tags_ = temp;
    } 
    if(j.find("properties") != j.end())
    {
        std::map<std::string, std::string> temp;
        j.at("properties").get_to(temp);
        o.properties_ = temp;
    } 
    if(j.find("sensitive") != j.end())
    {
        std::vector<std::string> temp;
        j.at("sensitive").get_to(temp);
        o.sensitive_ = temp;
    } 
}

std::optional<std::map<std::string, std::vector<std::string>>> Metadata::getTags() const
{
    return tags_;
}

void Metadata::setTags(const std::optional<std::map<std::string, std::vector<std::string>>>& value)
{
    tags_ = value;
}

std::optional<std::map<std::string, std::string>> Metadata::getProperties() const
{
    return properties_;
}

void Metadata::setProperties(const std::optional<std::map<std::string, std::string>>& value)
{
    properties_ = value;
}

std::optional<std::vector<std::string>> Metadata::getSensitive() const
{
    return sensitive_;
}

void Metadata::setSensitive(const std::optional<std::vector<std::string>>& value)
{
    sensitive_ = value;
}

} // namespace srclient::rest::model

