/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "srclient/rest/model/Metadata.h"
#include "srclient/rest/model/Helpers.h"

#include <sstream>

namespace srclient::rest::model
{

Metadata::Metadata()
{
    // Optional members are initialized to std::nullopt by default
}

void Metadata::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw srclient::rest::model::ValidationException(msg.str());
    }
}

bool Metadata::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Metadata::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Metadata" : pathPrefix;

                 
    if (m_Sensitive.has_value())
    {
        const std::set<std::string>& value = m_Sensitive.value();
        const std::string currentValuePath = _pathPrefix + ".sensitive";
                
        
        if (!srclient::rest::model::hasOnlyUniqueItems(value))
        {
            success = false;
            msg << currentValuePath << ": may not contain the same item more than once;";
        }
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool Metadata::operator==(const Metadata& rhs) const
{
    return
        m_Tags == rhs.m_Tags &&
        m_Properties == rhs.m_Properties &&
        m_Sensitive == rhs.m_Sensitive;
}

bool Metadata::operator!=(const Metadata& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Metadata& o)
{
    j = nlohmann::json::object();
    if(o.m_Tags.has_value())
        j["tags"] = o.m_Tags.value();
    if(o.m_Properties.has_value())
        j["properties"] = o.m_Properties.value();
    if(o.m_Sensitive.has_value())
        j["sensitive"] = o.m_Sensitive.value();
}

void from_json(const nlohmann::json& j, Metadata& o)
{
    if(j.find("tags") != j.end())
    {
        std::map<std::string, std::set<std::string>> temp;
        j.at("tags").get_to(temp);
        o.m_Tags = temp;
    } 
    if(j.find("properties") != j.end())
    {
        std::map<std::string, std::string> temp;
        j.at("properties").get_to(temp);
        o.m_Properties = temp;
    } 
    if(j.find("sensitive") != j.end())
    {
        std::set<std::string> temp;
        j.at("sensitive").get_to(temp);
        o.m_Sensitive = temp;
    } 
}

std::optional<std::map<std::string, std::set<std::string>>> Metadata::getTags() const
{
    return m_Tags;
}

void Metadata::setTags(const std::optional<std::map<std::string, std::set<std::string>>>& value)
{
    m_Tags = value;
}

std::optional<std::map<std::string, std::string>> Metadata::getProperties() const
{
    return m_Properties;
}

void Metadata::setProperties(const std::optional<std::map<std::string, std::string>>& value)
{
    m_Properties = value;
}

std::optional<std::set<std::string>> Metadata::getSensitive() const
{
    return m_Sensitive;
}

void Metadata::setSensitive(const std::optional<std::set<std::string>>& value)
{
    m_Sensitive = value;
}

} // namespace srclient::rest::model

