/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "srclient/rest/model/SchemaEntity.h"
#include "srclient/rest/model/Helpers.h"

#include <sstream>

namespace srclient::rest::model
{

SchemaEntity::SchemaEntity()
{
    m_EntityPath = "";
    m_EntityPathIsSet = false;
    m_EntityType = "";
    m_EntityTypeIsSet = false;
    
}

void SchemaEntity::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw srclient::rest::model::ValidationException(msg.str());
    }
}

bool SchemaEntity::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool SchemaEntity::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "SchemaEntity" : pathPrefix;

            
    return success;
}

bool SchemaEntity::operator==(const SchemaEntity& rhs) const
{
    return
    
    
    
    ((!entityPathIsSet() && !rhs.entityPathIsSet()) || (entityPathIsSet() && rhs.entityPathIsSet() && getEntityPath() == rhs.getEntityPath())) &&
    
    
    ((!entityTypeIsSet() && !rhs.entityTypeIsSet()) || (entityTypeIsSet() && rhs.entityTypeIsSet() && getEntityType() == rhs.getEntityType()))
    
    ;
}

bool SchemaEntity::operator!=(const SchemaEntity& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SchemaEntity& o)
{
    j = nlohmann::json::object();
    if(o.entityPathIsSet())
        j["entityPath"] = o.m_EntityPath;
    if(o.entityTypeIsSet())
        j["entityType"] = o.m_EntityType;
    
}

void from_json(const nlohmann::json& j, SchemaEntity& o)
{
    if(j.find("entityPath") != j.end())
    {
        j.at("entityPath").get_to(o.m_EntityPath);
        o.m_EntityPathIsSet = true;
    } 
    if(j.find("entityType") != j.end())
    {
        j.at("entityType").get_to(o.m_EntityType);
        o.m_EntityTypeIsSet = true;
    } 
    
}

std::string SchemaEntity::getEntityPath() const
{
    return m_EntityPath;
}
void SchemaEntity::setEntityPath(std::string const& value)
{
    m_EntityPath = value;
    m_EntityPathIsSet = true;
}
bool SchemaEntity::entityPathIsSet() const
{
    return m_EntityPathIsSet;
}
void SchemaEntity::unsetEntityPath()
{
    m_EntityPathIsSet = false;
}
std::string SchemaEntity::getEntityType() const
{
    return m_EntityType;
}
void SchemaEntity::setEntityType(std::string const& value)
{
    m_EntityType = value;
    m_EntityTypeIsSet = true;
}
bool SchemaEntity::entityTypeIsSet() const
{
    return m_EntityTypeIsSet;
}
void SchemaEntity::unsetEntityType()
{
    m_EntityTypeIsSet = false;
}


} // namespace srclient::rest::model

