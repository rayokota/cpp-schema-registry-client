/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "srclient/rest/model/ConfigUpdateRequest.h"
#include "srclient/rest/model/Helpers.h"

#include <sstream>

namespace srclient::rest::model
{

ConfigUpdateRequest::ConfigUpdateRequest()
{
    m_Alias = "";
    m_AliasIsSet = false;
    m_Normalize = false;
    m_NormalizeIsSet = false;
    m_ValidateFields = false;
    m_ValidateFieldsIsSet = false;
    m_ValidateRules = false;
    m_ValidateRulesIsSet = false;
    m_Compatibility = "";
    m_CompatibilityIsSet = false;
    m_CompatibilityGroup = "";
    m_CompatibilityGroupIsSet = false;
    m_DefaultMetadataIsSet = false;
    m_OverrideMetadataIsSet = false;
    m_DefaultRuleSetIsSet = false;
    m_OverrideRuleSetIsSet = false;
    
}

void ConfigUpdateRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw srclient::rest::model::ValidationException(msg.str());
    }
}

bool ConfigUpdateRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ConfigUpdateRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ConfigUpdateRequest" : pathPrefix;

                                            
    return success;
}

bool ConfigUpdateRequest::operator==(const ConfigUpdateRequest& rhs) const
{
    return
    
    
    
    ((!aliasIsSet() && !rhs.aliasIsSet()) || (aliasIsSet() && rhs.aliasIsSet() && getAlias() == rhs.getAlias())) &&
    
    
    ((!normalizeIsSet() && !rhs.normalizeIsSet()) || (normalizeIsSet() && rhs.normalizeIsSet() && isNormalize() == rhs.isNormalize())) &&
    
    
    ((!validateFieldsIsSet() && !rhs.validateFieldsIsSet()) || (validateFieldsIsSet() && rhs.validateFieldsIsSet() && isValidateFields() == rhs.isValidateFields())) &&
    
    
    ((!validateRulesIsSet() && !rhs.validateRulesIsSet()) || (validateRulesIsSet() && rhs.validateRulesIsSet() && isValidateRules() == rhs.isValidateRules())) &&
    
    
    ((!compatibilityIsSet() && !rhs.compatibilityIsSet()) || (compatibilityIsSet() && rhs.compatibilityIsSet() && getCompatibility() == rhs.getCompatibility())) &&
    
    
    ((!compatibilityGroupIsSet() && !rhs.compatibilityGroupIsSet()) || (compatibilityGroupIsSet() && rhs.compatibilityGroupIsSet() && getCompatibilityGroup() == rhs.getCompatibilityGroup())) &&
    
    
    ((!defaultMetadataIsSet() && !rhs.defaultMetadataIsSet()) || (defaultMetadataIsSet() && rhs.defaultMetadataIsSet() && getDefaultMetadata() == rhs.getDefaultMetadata())) &&
    
    
    ((!overrideMetadataIsSet() && !rhs.overrideMetadataIsSet()) || (overrideMetadataIsSet() && rhs.overrideMetadataIsSet() && getOverrideMetadata() == rhs.getOverrideMetadata())) &&
    
    
    ((!defaultRuleSetIsSet() && !rhs.defaultRuleSetIsSet()) || (defaultRuleSetIsSet() && rhs.defaultRuleSetIsSet() && getDefaultRuleSet() == rhs.getDefaultRuleSet())) &&
    
    
    ((!overrideRuleSetIsSet() && !rhs.overrideRuleSetIsSet()) || (overrideRuleSetIsSet() && rhs.overrideRuleSetIsSet() && getOverrideRuleSet() == rhs.getOverrideRuleSet()))
    
    ;
}

bool ConfigUpdateRequest::operator!=(const ConfigUpdateRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ConfigUpdateRequest& o)
{
    j = nlohmann::json::object();
    if(o.aliasIsSet())
        j["alias"] = o.m_Alias;
    if(o.normalizeIsSet())
        j["normalize"] = o.m_Normalize;
    if(o.validateFieldsIsSet())
        j["validateFields"] = o.m_ValidateFields;
    if(o.validateRulesIsSet())
        j["validateRules"] = o.m_ValidateRules;
    if(o.compatibilityIsSet())
        j["compatibility"] = o.m_Compatibility;
    if(o.compatibilityGroupIsSet())
        j["compatibilityGroup"] = o.m_CompatibilityGroup;
    if(o.defaultMetadataIsSet())
        j["defaultMetadata"] = o.m_DefaultMetadata;
    if(o.overrideMetadataIsSet())
        j["overrideMetadata"] = o.m_OverrideMetadata;
    if(o.defaultRuleSetIsSet())
        j["defaultRuleSet"] = o.m_DefaultRuleSet;
    if(o.overrideRuleSetIsSet())
        j["overrideRuleSet"] = o.m_OverrideRuleSet;
    
}

void from_json(const nlohmann::json& j, ConfigUpdateRequest& o)
{
    if(j.find("alias") != j.end())
    {
        j.at("alias").get_to(o.m_Alias);
        o.m_AliasIsSet = true;
    } 
    if(j.find("normalize") != j.end())
    {
        j.at("normalize").get_to(o.m_Normalize);
        o.m_NormalizeIsSet = true;
    } 
    if(j.find("validateFields") != j.end())
    {
        j.at("validateFields").get_to(o.m_ValidateFields);
        o.m_ValidateFieldsIsSet = true;
    } 
    if(j.find("validateRules") != j.end())
    {
        j.at("validateRules").get_to(o.m_ValidateRules);
        o.m_ValidateRulesIsSet = true;
    } 
    if(j.find("compatibility") != j.end())
    {
        j.at("compatibility").get_to(o.m_Compatibility);
        o.m_CompatibilityIsSet = true;
    } 
    if(j.find("compatibilityGroup") != j.end())
    {
        j.at("compatibilityGroup").get_to(o.m_CompatibilityGroup);
        o.m_CompatibilityGroupIsSet = true;
    } 
    if(j.find("defaultMetadata") != j.end())
    {
        j.at("defaultMetadata").get_to(o.m_DefaultMetadata);
        o.m_DefaultMetadataIsSet = true;
    } 
    if(j.find("overrideMetadata") != j.end())
    {
        j.at("overrideMetadata").get_to(o.m_OverrideMetadata);
        o.m_OverrideMetadataIsSet = true;
    } 
    if(j.find("defaultRuleSet") != j.end())
    {
        j.at("defaultRuleSet").get_to(o.m_DefaultRuleSet);
        o.m_DefaultRuleSetIsSet = true;
    } 
    if(j.find("overrideRuleSet") != j.end())
    {
        j.at("overrideRuleSet").get_to(o.m_OverrideRuleSet);
        o.m_OverrideRuleSetIsSet = true;
    } 
    
}

std::string ConfigUpdateRequest::getAlias() const
{
    return m_Alias;
}
void ConfigUpdateRequest::setAlias(std::string const& value)
{
    m_Alias = value;
    m_AliasIsSet = true;
}
bool ConfigUpdateRequest::aliasIsSet() const
{
    return m_AliasIsSet;
}
void ConfigUpdateRequest::unsetAlias()
{
    m_AliasIsSet = false;
}
bool ConfigUpdateRequest::isNormalize() const
{
    return m_Normalize;
}
void ConfigUpdateRequest::setNormalize(bool const value)
{
    m_Normalize = value;
    m_NormalizeIsSet = true;
}
bool ConfigUpdateRequest::normalizeIsSet() const
{
    return m_NormalizeIsSet;
}
void ConfigUpdateRequest::unsetNormalize()
{
    m_NormalizeIsSet = false;
}
bool ConfigUpdateRequest::isValidateFields() const
{
    return m_ValidateFields;
}
void ConfigUpdateRequest::setValidateFields(bool const value)
{
    m_ValidateFields = value;
    m_ValidateFieldsIsSet = true;
}
bool ConfigUpdateRequest::validateFieldsIsSet() const
{
    return m_ValidateFieldsIsSet;
}
void ConfigUpdateRequest::unsetValidateFields()
{
    m_ValidateFieldsIsSet = false;
}
bool ConfigUpdateRequest::isValidateRules() const
{
    return m_ValidateRules;
}
void ConfigUpdateRequest::setValidateRules(bool const value)
{
    m_ValidateRules = value;
    m_ValidateRulesIsSet = true;
}
bool ConfigUpdateRequest::validateRulesIsSet() const
{
    return m_ValidateRulesIsSet;
}
void ConfigUpdateRequest::unsetValidateRules()
{
    m_ValidateRulesIsSet = false;
}
std::string ConfigUpdateRequest::getCompatibility() const
{
    return m_Compatibility;
}
void ConfigUpdateRequest::setCompatibility(std::string const& value)
{
    m_Compatibility = value;
    m_CompatibilityIsSet = true;
}
bool ConfigUpdateRequest::compatibilityIsSet() const
{
    return m_CompatibilityIsSet;
}
void ConfigUpdateRequest::unsetCompatibility()
{
    m_CompatibilityIsSet = false;
}
std::string ConfigUpdateRequest::getCompatibilityGroup() const
{
    return m_CompatibilityGroup;
}
void ConfigUpdateRequest::setCompatibilityGroup(std::string const& value)
{
    m_CompatibilityGroup = value;
    m_CompatibilityGroupIsSet = true;
}
bool ConfigUpdateRequest::compatibilityGroupIsSet() const
{
    return m_CompatibilityGroupIsSet;
}
void ConfigUpdateRequest::unsetCompatibilityGroup()
{
    m_CompatibilityGroupIsSet = false;
}
srclient::rest::model::Metadata ConfigUpdateRequest::getDefaultMetadata() const
{
    return m_DefaultMetadata;
}
void ConfigUpdateRequest::setDefaultMetadata(srclient::rest::model::Metadata const& value)
{
    m_DefaultMetadata = value;
    m_DefaultMetadataIsSet = true;
}
bool ConfigUpdateRequest::defaultMetadataIsSet() const
{
    return m_DefaultMetadataIsSet;
}
void ConfigUpdateRequest::unsetDefaultMetadata()
{
    m_DefaultMetadataIsSet = false;
}
srclient::rest::model::Metadata ConfigUpdateRequest::getOverrideMetadata() const
{
    return m_OverrideMetadata;
}
void ConfigUpdateRequest::setOverrideMetadata(srclient::rest::model::Metadata const& value)
{
    m_OverrideMetadata = value;
    m_OverrideMetadataIsSet = true;
}
bool ConfigUpdateRequest::overrideMetadataIsSet() const
{
    return m_OverrideMetadataIsSet;
}
void ConfigUpdateRequest::unsetOverrideMetadata()
{
    m_OverrideMetadataIsSet = false;
}
srclient::rest::model::RuleSet ConfigUpdateRequest::getDefaultRuleSet() const
{
    return m_DefaultRuleSet;
}
void ConfigUpdateRequest::setDefaultRuleSet(srclient::rest::model::RuleSet const& value)
{
    m_DefaultRuleSet = value;
    m_DefaultRuleSetIsSet = true;
}
bool ConfigUpdateRequest::defaultRuleSetIsSet() const
{
    return m_DefaultRuleSetIsSet;
}
void ConfigUpdateRequest::unsetDefaultRuleSet()
{
    m_DefaultRuleSetIsSet = false;
}
srclient::rest::model::RuleSet ConfigUpdateRequest::getOverrideRuleSet() const
{
    return m_OverrideRuleSet;
}
void ConfigUpdateRequest::setOverrideRuleSet(srclient::rest::model::RuleSet const& value)
{
    m_OverrideRuleSet = value;
    m_OverrideRuleSetIsSet = true;
}
bool ConfigUpdateRequest::overrideRuleSetIsSet() const
{
    return m_OverrideRuleSetIsSet;
}
void ConfigUpdateRequest::unsetOverrideRuleSet()
{
    m_OverrideRuleSetIsSet = false;
}


} // namespace srclient::rest::model

