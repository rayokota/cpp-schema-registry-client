/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "srclient/rest/model/ServerConfig.h"

#include <sstream>

namespace srclient::rest::model
{

NLOHMANN_JSON_SERIALIZE_ENUM(CompatibilityLevel, {
    {CompatibilityLevel::Backward, "BACKWARD"},
    {CompatibilityLevel::BackwardTransitive, "BACKWARD_TRANSITIVE"},
    {CompatibilityLevel::Forward, "FORWARD"},
    {CompatibilityLevel::ForwardTransitive, "FORWARD_TRANSITIVE"},
    {CompatibilityLevel::Full, "FULL"},
    {CompatibilityLevel::FullTransitive, "FULL_TRANSITIVE"},
    {CompatibilityLevel::None, "NONE"}
})

ServerConfig::ServerConfig()
{
    // Optional members are initialized to std::nullopt by default
}

bool ServerConfig::operator==(const ServerConfig& rhs) const
{
    return
        compatibility_ == rhs.compatibility_ &&
        compatibilityLevel_ == rhs.compatibilityLevel_ &&
        alias_ == rhs.alias_ &&
        normalize_ == rhs.normalize_ &&
        validateFields_ == rhs.validateFields_ &&
        validateRules_ == rhs.validateRules_ &&
        compatibilityGroup_ == rhs.compatibilityGroup_ &&
        defaultMetadata_ == rhs.defaultMetadata_ &&
        overrideMetadata_ == rhs.overrideMetadata_ &&
        defaultRuleSet_ == rhs.defaultRuleSet_ &&
        overrideRuleSet_ == rhs.overrideRuleSet_;
}

bool ServerConfig::operator!=(const ServerConfig& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ServerConfig& o)
{
    j = nlohmann::json::object();
    if(o.compatibility_.has_value())
        j["compatibility"] = o.compatibility_.value();
    if(o.compatibilityLevel_.has_value())
        j["compatibilityLevel"] = o.compatibilityLevel_.value();
    if(o.alias_.has_value())
        j["alias"] = o.alias_.value();
    if(o.normalize_.has_value())
        j["normalize"] = o.normalize_.value();
    if(o.validateFields_.has_value())
        j["validateFields"] = o.validateFields_.value();
    if(o.validateRules_.has_value())
        j["validateRules"] = o.validateRules_.value();
    if(o.compatibilityGroup_.has_value())
        j["compatibilityGroup"] = o.compatibilityGroup_.value();
    if(o.defaultMetadata_.has_value())
        j["defaultMetadata"] = o.defaultMetadata_.value();
    if(o.overrideMetadata_.has_value())
        j["overrideMetadata"] = o.overrideMetadata_.value();
    if(o.defaultRuleSet_.has_value())
        j["defaultRuleSet"] = o.defaultRuleSet_.value();
    if(o.overrideRuleSet_.has_value())
        j["overrideRuleSet"] = o.overrideRuleSet_.value();
}

void from_json(const nlohmann::json& j, ServerConfig& o)
{
    if(j.find("compatibility") != j.end())
    {
        CompatibilityLevel temp;
        j.at("compatibility").get_to(temp);
        o.compatibility_ = temp;
    }
    if(j.find("compatibilityLevel") != j.end())
    {
        CompatibilityLevel temp;
        j.at("compatibilityLevel").get_to(temp);
        o.compatibilityLevel_ = temp;
    }
    if(j.find("alias") != j.end())
    {
        std::string temp;
        j.at("alias").get_to(temp);
        o.alias_ = temp;
    } 
    if(j.find("normalize") != j.end())
    {
        bool temp;
        j.at("normalize").get_to(temp);
        o.normalize_ = temp;
    } 
    if(j.find("validateFields") != j.end())
    {
        bool temp;
        j.at("validateFields").get_to(temp);
        o.validateFields_ = temp;
    } 
    if(j.find("validateRules") != j.end())
    {
        bool temp;
        j.at("validateRules").get_to(temp);
        o.validateRules_ = temp;
    } 
    if(j.find("compatibilityGroup") != j.end())
    {
        std::string temp;
        j.at("compatibilityGroup").get_to(temp);
        o.compatibilityGroup_ = temp;
    } 
    if(j.find("defaultMetadata") != j.end())
    {
        srclient::rest::model::Metadata temp;
        j.at("defaultMetadata").get_to(temp);
        o.defaultMetadata_ = temp;
    } 
    if(j.find("overrideMetadata") != j.end())
    {
        srclient::rest::model::Metadata temp;
        j.at("overrideMetadata").get_to(temp);
        o.overrideMetadata_ = temp;
    } 
    if(j.find("defaultRuleSet") != j.end())
    {
        srclient::rest::model::RuleSet temp;
        j.at("defaultRuleSet").get_to(temp);
        o.defaultRuleSet_ = temp;
    } 
    if(j.find("overrideRuleSet") != j.end())
    {
        srclient::rest::model::RuleSet temp;
        j.at("overrideRuleSet").get_to(temp);
        o.overrideRuleSet_ = temp;
    } 
}

std::optional<CompatibilityLevel> ServerConfig::getCompatibility() const
{
    return compatibility_;
}

void ServerConfig::setCompatibility(const std::optional<CompatibilityLevel>& value)
{
    compatibility_ = value;
}

std::optional<CompatibilityLevel> ServerConfig::getCompatibilityLevel() const
{
    return compatibilityLevel_;
}

void ServerConfig::setCompatibilityLevel(const std::optional<CompatibilityLevel>& value)
{
    compatibilityLevel_ = value;
}

std::optional<std::string> ServerConfig::getAlias() const
{
    return alias_;
}

void ServerConfig::setAlias(const std::optional<std::string>& value)
{
    alias_ = value;
}

std::optional<bool> ServerConfig::isNormalize() const
{
    return normalize_;
}

void ServerConfig::setNormalize(const std::optional<bool>& value)
{
    normalize_ = value;
}

std::optional<bool> ServerConfig::isValidateFields() const
{
    return validateFields_;
}

void ServerConfig::setValidateFields(const std::optional<bool>& value)
{
    validateFields_ = value;
}

std::optional<bool> ServerConfig::isValidateRules() const
{
    return validateRules_;
}

void ServerConfig::setValidateRules(const std::optional<bool>& value)
{
    validateRules_ = value;
}

std::optional<std::string> ServerConfig::getCompatibilityGroup() const
{
    return compatibilityGroup_;
}

void ServerConfig::setCompatibilityGroup(const std::optional<std::string>& value)
{
    compatibilityGroup_ = value;
}

std::optional<srclient::rest::model::Metadata> ServerConfig::getDefaultMetadata() const
{
    return defaultMetadata_;
}

void ServerConfig::setDefaultMetadata(const std::optional<srclient::rest::model::Metadata>& value)
{
    defaultMetadata_ = value;
}

std::optional<srclient::rest::model::Metadata> ServerConfig::getOverrideMetadata() const
{
    return overrideMetadata_;
}

void ServerConfig::setOverrideMetadata(const std::optional<srclient::rest::model::Metadata>& value)
{
    overrideMetadata_ = value;
}

std::optional<srclient::rest::model::RuleSet> ServerConfig::getDefaultRuleSet() const
{
    return defaultRuleSet_;
}

void ServerConfig::setDefaultRuleSet(const std::optional<srclient::rest::model::RuleSet>& value)
{
    defaultRuleSet_ = value;
}

std::optional<srclient::rest::model::RuleSet> ServerConfig::getOverrideRuleSet() const
{
    return overrideRuleSet_;
}

void ServerConfig::setOverrideRuleSet(const std::optional<srclient::rest::model::RuleSet>& value)
{
    overrideRuleSet_ = value;
}

} // namespace srclient::rest::model

