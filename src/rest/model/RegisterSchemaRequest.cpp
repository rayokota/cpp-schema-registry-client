/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "srclient/rest/model/RegisterSchemaRequest.h"
#include "srclient/rest/model/Helpers.h"

#include <sstream>

namespace srclient::rest::model
{

RegisterSchemaRequest::RegisterSchemaRequest()
{
    m_Version = 0;
    m_VersionIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_SchemaType = "";
    m_SchemaTypeIsSet = false;
    m_ReferencesIsSet = false;
    m_MetadataIsSet = false;
    m_RuleSetIsSet = false;
    m_Schema = "";
    m_SchemaIsSet = false;
    m_SchemaTagsToAddIsSet = false;
    m_SchemaTagsToRemoveIsSet = false;
    m_PropagateSchemaTags = false;
    m_PropagateSchemaTagsIsSet = false;
    
}

void RegisterSchemaRequest::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw srclient::rest::model::ValidationException(msg.str());
    }
}

bool RegisterSchemaRequest::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool RegisterSchemaRequest::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "RegisterSchemaRequest" : pathPrefix;

                     
    if (referencesIsSet())
    {
        const std::vector<srclient::rest::model::SchemaReference>& value = m_References;
        const std::string currentValuePath = _pathPrefix + ".references";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const srclient::rest::model::SchemaReference& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".references") && success;
 
                i++;
            }
        }

    }
                     
    if (schemaTagsToAddIsSet())
    {
        const std::vector<srclient::rest::model::SchemaTags>& value = m_SchemaTagsToAdd;
        const std::string currentValuePath = _pathPrefix + ".schemaTagsToAdd";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const srclient::rest::model::SchemaTags& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".schemaTagsToAdd") && success;
 
                i++;
            }
        }

    }
         
    if (schemaTagsToRemoveIsSet())
    {
        const std::vector<srclient::rest::model::SchemaTags>& value = m_SchemaTagsToRemove;
        const std::string currentValuePath = _pathPrefix + ".schemaTagsToRemove";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const srclient::rest::model::SchemaTags& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".schemaTagsToRemove") && success;
 
                i++;
            }
        }

    }
        
    return success;
}

bool RegisterSchemaRequest::operator==(const RegisterSchemaRequest& rhs) const
{
    return
    
    
    
    ((!versionIsSet() && !rhs.versionIsSet()) || (versionIsSet() && rhs.versionIsSet() && getVersion() == rhs.getVersion())) &&
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!schemaTypeIsSet() && !rhs.schemaTypeIsSet()) || (schemaTypeIsSet() && rhs.schemaTypeIsSet() && getSchemaType() == rhs.getSchemaType())) &&
    
    
    ((!referencesIsSet() && !rhs.referencesIsSet()) || (referencesIsSet() && rhs.referencesIsSet() && getReferences() == rhs.getReferences())) &&
    
    
    ((!metadataIsSet() && !rhs.metadataIsSet()) || (metadataIsSet() && rhs.metadataIsSet() && getMetadata() == rhs.getMetadata())) &&
    
    
    ((!ruleSetIsSet() && !rhs.ruleSetIsSet()) || (ruleSetIsSet() && rhs.ruleSetIsSet() && getRuleSet() == rhs.getRuleSet())) &&
    
    
    ((!schemaIsSet() && !rhs.schemaIsSet()) || (schemaIsSet() && rhs.schemaIsSet() && getSchema() == rhs.getSchema())) &&
    
    
    ((!schemaTagsToAddIsSet() && !rhs.schemaTagsToAddIsSet()) || (schemaTagsToAddIsSet() && rhs.schemaTagsToAddIsSet() && getSchemaTagsToAdd() == rhs.getSchemaTagsToAdd())) &&
    
    
    ((!schemaTagsToRemoveIsSet() && !rhs.schemaTagsToRemoveIsSet()) || (schemaTagsToRemoveIsSet() && rhs.schemaTagsToRemoveIsSet() && getSchemaTagsToRemove() == rhs.getSchemaTagsToRemove())) &&
    
    
    ((!propagateSchemaTagsIsSet() && !rhs.propagateSchemaTagsIsSet()) || (propagateSchemaTagsIsSet() && rhs.propagateSchemaTagsIsSet() && isPropagateSchemaTags() == rhs.isPropagateSchemaTags()))
    
    ;
}

bool RegisterSchemaRequest::operator!=(const RegisterSchemaRequest& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RegisterSchemaRequest& o)
{
    j = nlohmann::json::object();
    if(o.versionIsSet())
        j["version"] = o.m_Version;
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.schemaTypeIsSet())
        j["schemaType"] = o.m_SchemaType;
    if(o.referencesIsSet() || !o.m_References.empty())
        j["references"] = o.m_References;
    if(o.metadataIsSet())
        j["metadata"] = o.m_Metadata;
    if(o.ruleSetIsSet())
        j["ruleSet"] = o.m_RuleSet;
    if(o.schemaIsSet())
        j["schema"] = o.m_Schema;
    if(o.schemaTagsToAddIsSet() || !o.m_SchemaTagsToAdd.empty())
        j["schemaTagsToAdd"] = o.m_SchemaTagsToAdd;
    if(o.schemaTagsToRemoveIsSet() || !o.m_SchemaTagsToRemove.empty())
        j["schemaTagsToRemove"] = o.m_SchemaTagsToRemove;
    if(o.propagateSchemaTagsIsSet())
        j["propagateSchemaTags"] = o.m_PropagateSchemaTags;
    
}

void from_json(const nlohmann::json& j, RegisterSchemaRequest& o)
{
    if(j.find("version") != j.end())
    {
        j.at("version").get_to(o.m_Version);
        o.m_VersionIsSet = true;
    } 
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("schemaType") != j.end())
    {
        j.at("schemaType").get_to(o.m_SchemaType);
        o.m_SchemaTypeIsSet = true;
    } 
    if(j.find("references") != j.end())
    {
        j.at("references").get_to(o.m_References);
        o.m_ReferencesIsSet = true;
    } 
    if(j.find("metadata") != j.end())
    {
        j.at("metadata").get_to(o.m_Metadata);
        o.m_MetadataIsSet = true;
    } 
    if(j.find("ruleSet") != j.end())
    {
        j.at("ruleSet").get_to(o.m_RuleSet);
        o.m_RuleSetIsSet = true;
    } 
    if(j.find("schema") != j.end())
    {
        j.at("schema").get_to(o.m_Schema);
        o.m_SchemaIsSet = true;
    } 
    if(j.find("schemaTagsToAdd") != j.end())
    {
        j.at("schemaTagsToAdd").get_to(o.m_SchemaTagsToAdd);
        o.m_SchemaTagsToAddIsSet = true;
    } 
    if(j.find("schemaTagsToRemove") != j.end())
    {
        j.at("schemaTagsToRemove").get_to(o.m_SchemaTagsToRemove);
        o.m_SchemaTagsToRemoveIsSet = true;
    } 
    if(j.find("propagateSchemaTags") != j.end())
    {
        j.at("propagateSchemaTags").get_to(o.m_PropagateSchemaTags);
        o.m_PropagateSchemaTagsIsSet = true;
    } 
    
}

int32_t RegisterSchemaRequest::getVersion() const
{
    return m_Version;
}
void RegisterSchemaRequest::setVersion(int32_t const value)
{
    m_Version = value;
    m_VersionIsSet = true;
}
bool RegisterSchemaRequest::versionIsSet() const
{
    return m_VersionIsSet;
}
void RegisterSchemaRequest::unsetVersion()
{
    m_VersionIsSet = false;
}
int32_t RegisterSchemaRequest::getId() const
{
    return m_Id;
}
void RegisterSchemaRequest::setId(int32_t const value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool RegisterSchemaRequest::idIsSet() const
{
    return m_IdIsSet;
}
void RegisterSchemaRequest::unsetId()
{
    m_IdIsSet = false;
}
std::string RegisterSchemaRequest::getSchemaType() const
{
    return m_SchemaType;
}
void RegisterSchemaRequest::setSchemaType(std::string const& value)
{
    m_SchemaType = value;
    m_SchemaTypeIsSet = true;
}
bool RegisterSchemaRequest::schemaTypeIsSet() const
{
    return m_SchemaTypeIsSet;
}
void RegisterSchemaRequest::unsetSchemaType()
{
    m_SchemaTypeIsSet = false;
}
std::vector<srclient::rest::model::SchemaReference> RegisterSchemaRequest::getReferences() const
{
    return m_References;
}
void RegisterSchemaRequest::setReferences(std::vector<srclient::rest::model::SchemaReference> const& value)
{
    m_References = value;
    m_ReferencesIsSet = true;
}
bool RegisterSchemaRequest::referencesIsSet() const
{
    return m_ReferencesIsSet;
}
void RegisterSchemaRequest::unsetReferences()
{
    m_ReferencesIsSet = false;
}
srclient::rest::model::Metadata RegisterSchemaRequest::getMetadata() const
{
    return m_Metadata;
}
void RegisterSchemaRequest::setMetadata(srclient::rest::model::Metadata const& value)
{
    m_Metadata = value;
    m_MetadataIsSet = true;
}
bool RegisterSchemaRequest::metadataIsSet() const
{
    return m_MetadataIsSet;
}
void RegisterSchemaRequest::unsetMetadata()
{
    m_MetadataIsSet = false;
}
srclient::rest::model::RuleSet RegisterSchemaRequest::getRuleSet() const
{
    return m_RuleSet;
}
void RegisterSchemaRequest::setRuleSet(srclient::rest::model::RuleSet const& value)
{
    m_RuleSet = value;
    m_RuleSetIsSet = true;
}
bool RegisterSchemaRequest::ruleSetIsSet() const
{
    return m_RuleSetIsSet;
}
void RegisterSchemaRequest::unsetRuleSet()
{
    m_RuleSetIsSet = false;
}
std::string RegisterSchemaRequest::getSchema() const
{
    return m_Schema;
}
void RegisterSchemaRequest::setSchema(std::string const& value)
{
    m_Schema = value;
    m_SchemaIsSet = true;
}
bool RegisterSchemaRequest::schemaIsSet() const
{
    return m_SchemaIsSet;
}
void RegisterSchemaRequest::unsetSchema()
{
    m_SchemaIsSet = false;
}
std::vector<srclient::rest::model::SchemaTags> RegisterSchemaRequest::getSchemaTagsToAdd() const
{
    return m_SchemaTagsToAdd;
}
void RegisterSchemaRequest::setSchemaTagsToAdd(std::vector<srclient::rest::model::SchemaTags> const& value)
{
    m_SchemaTagsToAdd = value;
    m_SchemaTagsToAddIsSet = true;
}
bool RegisterSchemaRequest::schemaTagsToAddIsSet() const
{
    return m_SchemaTagsToAddIsSet;
}
void RegisterSchemaRequest::unsetSchemaTagsToAdd()
{
    m_SchemaTagsToAddIsSet = false;
}
std::vector<srclient::rest::model::SchemaTags> RegisterSchemaRequest::getSchemaTagsToRemove() const
{
    return m_SchemaTagsToRemove;
}
void RegisterSchemaRequest::setSchemaTagsToRemove(std::vector<srclient::rest::model::SchemaTags> const& value)
{
    m_SchemaTagsToRemove = value;
    m_SchemaTagsToRemoveIsSet = true;
}
bool RegisterSchemaRequest::schemaTagsToRemoveIsSet() const
{
    return m_SchemaTagsToRemoveIsSet;
}
void RegisterSchemaRequest::unsetSchemaTagsToRemove()
{
    m_SchemaTagsToRemoveIsSet = false;
}
bool RegisterSchemaRequest::isPropagateSchemaTags() const
{
    return m_PropagateSchemaTags;
}
void RegisterSchemaRequest::setPropagateSchemaTags(bool const value)
{
    m_PropagateSchemaTags = value;
    m_PropagateSchemaTagsIsSet = true;
}
bool RegisterSchemaRequest::propagateSchemaTagsIsSet() const
{
    return m_PropagateSchemaTagsIsSet;
}
void RegisterSchemaRequest::unsetPropagateSchemaTags()
{
    m_PropagateSchemaTagsIsSet = false;
}


} // namespace srclient::rest::model

