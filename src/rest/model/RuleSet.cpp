/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "srclient/rest/model/RuleSet.h"

#include <sstream>

namespace srclient::rest::model
{

RuleSet::RuleSet()
{
    // Optional members are initialized to std::nullopt by default
}

bool RuleSet::operator==(const RuleSet& rhs) const
{
    return
        m_MigrationRules == rhs.m_MigrationRules &&
        m_DomainRules == rhs.m_DomainRules &&
        m_EncodingRules == rhs.m_EncodingRules;
}

bool RuleSet::operator!=(const RuleSet& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RuleSet& o)
{
    j = nlohmann::json::object();
    if(o.m_MigrationRules.has_value())
        j["migrationRules"] = o.m_MigrationRules.value();
    if(o.m_DomainRules.has_value())
        j["domainRules"] = o.m_DomainRules.value();
    if(o.m_EncodingRules.has_value())
        j["encodingRules"] = o.m_EncodingRules.value();
}

void from_json(const nlohmann::json& j, RuleSet& o)
{
    if(j.find("migrationRules") != j.end())
    {
        std::vector<srclient::rest::model::Rule> temp;
        j.at("migrationRules").get_to(temp);
        o.m_MigrationRules = temp;
    } 
    if(j.find("domainRules") != j.end())
    {
        std::vector<srclient::rest::model::Rule> temp;
        j.at("domainRules").get_to(temp);
        o.m_DomainRules = temp;
    }
    if(j.find("encodingRules") != j.end())
    {
        std::vector<srclient::rest::model::Rule> temp;
        j.at("encodingRules").get_to(temp);
        o.m_EncodingRules = temp;
    }
}

std::optional<std::vector<srclient::rest::model::Rule>> RuleSet::getMigrationRules() const
{
    return m_MigrationRules;
}

void RuleSet::setMigrationRules(const std::optional<std::vector<srclient::rest::model::Rule>>& value)
{
    m_MigrationRules = value;
}

std::optional<std::vector<srclient::rest::model::Rule>> RuleSet::getDomainRules() const
{
    return m_DomainRules;
}

void RuleSet::setDomainRules(const std::optional<std::vector<srclient::rest::model::Rule>>& value)
{
    m_DomainRules = value;
}

std::optional<std::vector<srclient::rest::model::Rule>> RuleSet::getEncodingRules() const
{
    return m_EncodingRules;
}

void RuleSet::setEncodingRules(const std::optional<std::vector<srclient::rest::model::Rule>>& value)
{
    m_EncodingRules = value;
}

} // namespace srclient::rest::model

