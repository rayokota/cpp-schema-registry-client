/**
 * Confluent Schema Registry
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "srclient/rest/model/RuleSet.h"

#include <sstream>

namespace srclient::rest::model {

RuleSet::RuleSet() {
    // Optional members are initialized to std::nullopt by default
}

bool RuleSet::operator==(const RuleSet &rhs) const {
    return migrationRules_ == rhs.migrationRules_ &&
           domainRules_ == rhs.domainRules_ &&
           encodingRules_ == rhs.encodingRules_;
}

bool RuleSet::operator!=(const RuleSet &rhs) const { return !(*this == rhs); }

void to_json(nlohmann::json &j, const RuleSet &o) {
    j = nlohmann::json::object();
    if (o.migrationRules_.has_value())
        j["migrationRules"] = o.migrationRules_.value();
    if (o.domainRules_.has_value()) j["domainRules"] = o.domainRules_.value();
    if (o.encodingRules_.has_value())
        j["encodingRules"] = o.encodingRules_.value();
}

void from_json(const nlohmann::json &j, RuleSet &o) {
    if (j.find("migrationRules") != j.end()) {
        std::vector<srclient::rest::model::Rule> temp;
        j.at("migrationRules").get_to(temp);
        o.migrationRules_ = temp;
    }
    if (j.find("domainRules") != j.end()) {
        std::vector<srclient::rest::model::Rule> temp;
        j.at("domainRules").get_to(temp);
        o.domainRules_ = temp;
    }
    if (j.find("encodingRules") != j.end()) {
        std::vector<srclient::rest::model::Rule> temp;
        j.at("encodingRules").get_to(temp);
        o.encodingRules_ = temp;
    }
}

std::optional<std::vector<srclient::rest::model::Rule>>
RuleSet::getMigrationRules() const {
    return migrationRules_;
}

void RuleSet::setMigrationRules(
    const std::optional<std::vector<srclient::rest::model::Rule>> &value) {
    migrationRules_ = value;
}

std::optional<std::vector<srclient::rest::model::Rule>>
RuleSet::getDomainRules() const {
    return domainRules_;
}

void RuleSet::setDomainRules(
    const std::optional<std::vector<srclient::rest::model::Rule>> &value) {
    domainRules_ = value;
}

std::optional<std::vector<srclient::rest::model::Rule>>
RuleSet::getEncodingRules() const {
    return encodingRules_;
}

void RuleSet::setEncodingRules(
    const std::optional<std::vector<srclient::rest::model::Rule>> &value) {
    encodingRules_ = value;
}

} // namespace srclient::rest::model
