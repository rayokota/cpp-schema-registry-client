/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SchemaRegistryClient/rest/model/RuleSet.h"
#include "SchemaRegistryClient/rest/model/Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

RuleSet::RuleSet()
{
    m_MigrationRulesIsSet = false;
    m_DomainRulesIsSet = false;
    m_Empty = false;
    m_EmptyIsSet = false;
    
}

void RuleSet::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool RuleSet::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool RuleSet::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "RuleSet" : pathPrefix;

         
    if (migrationRulesIsSet())
    {
        const std::vector<org::openapitools::server::model::Rule>& value = m_MigrationRules;
        const std::string currentValuePath = _pathPrefix + ".migrationRules";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::Rule& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".migrationRules") && success;
 
                i++;
            }
        }

    }
         
    if (domainRulesIsSet())
    {
        const std::vector<org::openapitools::server::model::Rule>& value = m_DomainRules;
        const std::string currentValuePath = _pathPrefix + ".domainRules";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::Rule& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".domainRules") && success;
 
                i++;
            }
        }

    }
        
    return success;
}

bool RuleSet::operator==(const RuleSet& rhs) const
{
    return
    
    
    
    ((!migrationRulesIsSet() && !rhs.migrationRulesIsSet()) || (migrationRulesIsSet() && rhs.migrationRulesIsSet() && getMigrationRules() == rhs.getMigrationRules())) &&
    
    
    ((!domainRulesIsSet() && !rhs.domainRulesIsSet()) || (domainRulesIsSet() && rhs.domainRulesIsSet() && getDomainRules() == rhs.getDomainRules())) &&
    
    
    ((!emptyIsSet() && !rhs.emptyIsSet()) || (emptyIsSet() && rhs.emptyIsSet() && isEmpty() == rhs.isEmpty()))
    
    ;
}

bool RuleSet::operator!=(const RuleSet& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RuleSet& o)
{
    j = nlohmann::json::object();
    if(o.migrationRulesIsSet() || !o.m_MigrationRules.empty())
        j["migrationRules"] = o.m_MigrationRules;
    if(o.domainRulesIsSet() || !o.m_DomainRules.empty())
        j["domainRules"] = o.m_DomainRules;
    if(o.emptyIsSet())
        j["empty"] = o.m_Empty;
    
}

void from_json(const nlohmann::json& j, RuleSet& o)
{
    if(j.find("migrationRules") != j.end())
    {
        j.at("migrationRules").get_to(o.m_MigrationRules);
        o.m_MigrationRulesIsSet = true;
    } 
    if(j.find("domainRules") != j.end())
    {
        j.at("domainRules").get_to(o.m_DomainRules);
        o.m_DomainRulesIsSet = true;
    } 
    if(j.find("empty") != j.end())
    {
        j.at("empty").get_to(o.m_Empty);
        o.m_EmptyIsSet = true;
    } 
    
}

std::vector<org::openapitools::server::model::Rule> RuleSet::getMigrationRules() const
{
    return m_MigrationRules;
}
void RuleSet::setMigrationRules(std::vector<org::openapitools::server::model::Rule> const& value)
{
    m_MigrationRules = value;
    m_MigrationRulesIsSet = true;
}
bool RuleSet::migrationRulesIsSet() const
{
    return m_MigrationRulesIsSet;
}
void RuleSet::unsetMigrationRules()
{
    m_MigrationRulesIsSet = false;
}
std::vector<org::openapitools::server::model::Rule> RuleSet::getDomainRules() const
{
    return m_DomainRules;
}
void RuleSet::setDomainRules(std::vector<org::openapitools::server::model::Rule> const& value)
{
    m_DomainRules = value;
    m_DomainRulesIsSet = true;
}
bool RuleSet::domainRulesIsSet() const
{
    return m_DomainRulesIsSet;
}
void RuleSet::unsetDomainRules()
{
    m_DomainRulesIsSet = false;
}
bool RuleSet::isEmpty() const
{
    return m_Empty;
}
void RuleSet::setEmpty(bool const value)
{
    m_Empty = value;
    m_EmptyIsSet = true;
}
bool RuleSet::emptyIsSet() const
{
    return m_EmptyIsSet;
}
void RuleSet::unsetEmpty()
{
    m_EmptyIsSet = false;
}


} // namespace org::openapitools::server::model

