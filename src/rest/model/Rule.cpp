/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "srclient/rest/model/Rule.h"

#include <sstream>

namespace srclient::rest::model
{

Rule::Rule()
{
    // Optional members are initialized to std::nullopt by default
}

bool Rule::operator==(const Rule& rhs) const
{
    return
        m_Name == rhs.m_Name &&
        m_Doc == rhs.m_Doc &&
        m_Kind == rhs.m_Kind &&
        m_Mode == rhs.m_Mode &&
        m_Type == rhs.m_Type &&
        m_Tags == rhs.m_Tags &&
        m_Params == rhs.m_Params &&
        m_Expr == rhs.m_Expr &&
        m_OnSuccess == rhs.m_OnSuccess &&
        m_OnFailure == rhs.m_OnFailure &&
        m_Disabled == rhs.m_Disabled;
}

bool Rule::operator!=(const Rule& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Rule& o)
{
    j = nlohmann::json::object();
    if(o.m_Name.has_value())
        j["name"] = o.m_Name.value();
    if(o.m_Doc.has_value())
        j["doc"] = o.m_Doc.value();
    if(o.m_Kind.has_value())
        j["kind"] = o.m_Kind.value();
    if(o.m_Mode.has_value())
        j["mode"] = o.m_Mode.value();
    if(o.m_Type.has_value())
        j["type"] = o.m_Type.value();
    if(o.m_Tags.has_value())
        j["tags"] = o.m_Tags.value();
    if(o.m_Params.has_value())
        j["params"] = o.m_Params.value();
    if(o.m_Expr.has_value())
        j["expr"] = o.m_Expr.value();
    if(o.m_OnSuccess.has_value())
        j["onSuccess"] = o.m_OnSuccess.value();
    if(o.m_OnFailure.has_value())
        j["onFailure"] = o.m_OnFailure.value();
    if(o.m_Disabled.has_value())
        j["disabled"] = o.m_Disabled.value();
}

void from_json(const nlohmann::json& j, Rule& o)
{
    if(j.find("name") != j.end())
    {
        std::string temp;
        j.at("name").get_to(temp);
        o.m_Name = temp;
    } 
    if(j.find("doc") != j.end())
    {
        std::string temp;
        j.at("doc").get_to(temp);
        o.m_Doc = temp;
    } 
    if(j.find("kind") != j.end())
    {
        std::string temp;
        j.at("kind").get_to(temp);
        o.m_Kind = temp;
    } 
    if(j.find("mode") != j.end())
    {
        std::string temp;
        j.at("mode").get_to(temp);
        o.m_Mode = temp;
    } 
    if(j.find("type") != j.end())
    {
        std::string temp;
        j.at("type").get_to(temp);
        o.m_Type = temp;
    } 
    if(j.find("tags") != j.end())
    {
        std::set<std::string> temp;
        j.at("tags").get_to(temp);
        o.m_Tags = temp;
    } 
    if(j.find("params") != j.end())
    {
        std::map<std::string, std::string> temp;
        j.at("params").get_to(temp);
        o.m_Params = temp;
    } 
    if(j.find("expr") != j.end())
    {
        std::string temp;
        j.at("expr").get_to(temp);
        o.m_Expr = temp;
    } 
    if(j.find("onSuccess") != j.end())
    {
        std::string temp;
        j.at("onSuccess").get_to(temp);
        o.m_OnSuccess = temp;
    } 
    if(j.find("onFailure") != j.end())
    {
        std::string temp;
        j.at("onFailure").get_to(temp);
        o.m_OnFailure = temp;
    } 
    if(j.find("disabled") != j.end())
    {
        bool temp;
        j.at("disabled").get_to(temp);
        o.m_Disabled = temp;
    } 
}

std::optional<std::string> Rule::getName() const
{
    return m_Name;
}

void Rule::setName(const std::optional<std::string>& value)
{
    m_Name = value;
}

std::optional<std::string> Rule::getDoc() const
{
    return m_Doc;
}

void Rule::setDoc(const std::optional<std::string>& value)
{
    m_Doc = value;
}

std::optional<std::string> Rule::getKind() const
{
    return m_Kind;
}

void Rule::setKind(const std::optional<std::string>& value)
{
    m_Kind = value;
}

std::optional<std::string> Rule::getMode() const
{
    return m_Mode;
}

void Rule::setMode(const std::optional<std::string>& value)
{
    m_Mode = value;
}

std::optional<std::string> Rule::getType() const
{
    return m_Type;
}

void Rule::setType(const std::optional<std::string>& value)
{
    m_Type = value;
}

std::optional<std::set<std::string>> Rule::getTags() const
{
    return m_Tags;
}

void Rule::setTags(const std::optional<std::set<std::string>>& value)
{
    m_Tags = value;
}

std::optional<std::map<std::string, std::string>> Rule::getParams() const
{
    return m_Params;
}

void Rule::setParams(const std::optional<std::map<std::string, std::string>>& value)
{
    m_Params = value;
}

std::optional<std::string> Rule::getExpr() const
{
    return m_Expr;
}

void Rule::setExpr(const std::optional<std::string>& value)
{
    m_Expr = value;
}

std::optional<std::string> Rule::getOnSuccess() const
{
    return m_OnSuccess;
}

void Rule::setOnSuccess(const std::optional<std::string>& value)
{
    m_OnSuccess = value;
}

std::optional<std::string> Rule::getOnFailure() const
{
    return m_OnFailure;
}

void Rule::setOnFailure(const std::optional<std::string>& value)
{
    m_OnFailure = value;
}

std::optional<bool> Rule::isDisabled() const
{
    return m_Disabled;
}

void Rule::setDisabled(const std::optional<bool>& value)
{
    m_Disabled = value;
}

} // namespace srclient::rest::model

