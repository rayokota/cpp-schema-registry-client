/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "srclient/rest/model/RegisterSchemaResponse.h"
#include "srclient/rest/model/Helpers.h"

#include <sstream>

namespace srclient::rest::model
{

RegisterSchemaResponse::RegisterSchemaResponse()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Guid = "";
    m_GuidIsSet = false;
    m_Subject = "";
    m_SubjectIsSet = false;
    m_Version = 0;
    m_VersionIsSet = false;
    m_SchemaType = "";
    m_SchemaTypeIsSet = false;
    m_ReferencesIsSet = false;
    m_MetadataIsSet = false;
    m_RuleSetIsSet = false;
    m_Schema = "";
    m_SchemaIsSet = false;
    
}

void RegisterSchemaResponse::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw srclient::rest::model::ValidationException(msg.str());
    }
}

bool RegisterSchemaResponse::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool RegisterSchemaResponse::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "RegisterSchemaResponse" : pathPrefix;

                     
    if (referencesIsSet())
    {
        const std::vector<srclient::rest::model::SchemaReference>& value = m_References;
        const std::string currentValuePath = _pathPrefix + ".references";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const srclient::rest::model::SchemaReference& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".references") && success;
 
                i++;
            }
        }

    }
                
    return success;
}

bool RegisterSchemaResponse::operator==(const RegisterSchemaResponse& rhs) const
{
    return
    
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!versionIsSet() && !rhs.versionIsSet()) || (versionIsSet() && rhs.versionIsSet() && getVersion() == rhs.getVersion())) &&
    
    
    ((!schemaTypeIsSet() && !rhs.schemaTypeIsSet()) || (schemaTypeIsSet() && rhs.schemaTypeIsSet() && getSchemaType() == rhs.getSchemaType())) &&
    
    
    ((!referencesIsSet() && !rhs.referencesIsSet()) || (referencesIsSet() && rhs.referencesIsSet() && getReferences() == rhs.getReferences())) &&
    
    
    ((!metadataIsSet() && !rhs.metadataIsSet()) || (metadataIsSet() && rhs.metadataIsSet() && getMetadata() == rhs.getMetadata())) &&
    
    
    ((!ruleSetIsSet() && !rhs.ruleSetIsSet()) || (ruleSetIsSet() && rhs.ruleSetIsSet() && getRuleSet() == rhs.getRuleSet())) &&
    
    
    ((!schemaIsSet() && !rhs.schemaIsSet()) || (schemaIsSet() && rhs.schemaIsSet() && getSchema() == rhs.getSchema()))
    
    ;
}

bool RegisterSchemaResponse::operator!=(const RegisterSchemaResponse& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RegisterSchemaResponse& o)
{
    j = nlohmann::json::object();
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.guidIsSet())
        j["guid"] = o.m_Guid;
    if(o.subjectIsSet())
        j["subject"] = o.m_Subject;
    if(o.versionIsSet())
        j["version"] = o.m_Version;
    if(o.schemaTypeIsSet())
        j["schemaType"] = o.m_SchemaType;
    if(o.referencesIsSet() || !o.m_References.empty())
        j["references"] = o.m_References;
    if(o.metadataIsSet())
        j["metadata"] = o.m_Metadata;
    if(o.ruleSetIsSet())
        j["ruleSet"] = o.m_RuleSet;
    if(o.schemaIsSet())
        j["schema"] = o.m_Schema;
    
}

void from_json(const nlohmann::json& j, RegisterSchemaResponse& o)
{
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    }
    if(j.find("guid") != j.end())
    {
        j.at("guid").get_to(o.m_Guid);
        o.m_GuidIsSet = true;
    }
    if(j.find("subject") != j.end())
    {
        j.at("subject").get_to(o.m_Subject);
        o.m_SubjectIsSet = true;
    }
    if(j.find("version") != j.end())
    {
        j.at("version").get_to(o.m_Version);
        o.m_VersionIsSet = true;
    } 
    if(j.find("schemaType") != j.end())
    {
        j.at("schemaType").get_to(o.m_SchemaType);
        o.m_SchemaTypeIsSet = true;
    } 
    if(j.find("references") != j.end())
    {
        j.at("references").get_to(o.m_References);
        o.m_ReferencesIsSet = true;
    } 
    if(j.find("metadata") != j.end())
    {
        j.at("metadata").get_to(o.m_Metadata);
        o.m_MetadataIsSet = true;
    } 
    if(j.find("ruleSet") != j.end())
    {
        j.at("ruleSet").get_to(o.m_RuleSet);
        o.m_RuleSetIsSet = true;
    } 
    if(j.find("schema") != j.end())
    {
        j.at("schema").get_to(o.m_Schema);
        o.m_SchemaIsSet = true;
    } 
    
}

int32_t RegisterSchemaResponse::getId() const
{
    return m_Id;
}
void RegisterSchemaResponse::setId(int32_t const value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool RegisterSchemaResponse::idIsSet() const
{
    return m_IdIsSet;
}
void RegisterSchemaResponse::unsetId()
{
    m_IdIsSet = false;
}
std::string RegisterSchemaResponse::getGuid() const
{
    return m_Guid;
}
void RegisterSchemaResponse::setGuid(std::string const& value)
{
    m_Guid = value;
    m_GuidIsSet = true;
}
bool RegisterSchemaResponse::guidIsSet() const
{
    return m_GuidIsSet;
}
void RegisterSchemaResponse::unsetGuid()
{
    m_GuidIsSet = false;
}
std::string RegisterSchemaResponse::getSubject() const
{
    return m_Subject;
}
void RegisterSchemaResponse::setSubject(std::string const& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}
bool RegisterSchemaResponse::subjectIsSet() const
{
    return m_SubjectIsSet;
}
void RegisterSchemaResponse::unsetSubject()
{
    m_SubjectIsSet = false;
}
int32_t RegisterSchemaResponse::getVersion() const
{
    return m_Version;
}
void RegisterSchemaResponse::setVersion(int32_t const value)
{
    m_Version = value;
    m_VersionIsSet = true;
}
bool RegisterSchemaResponse::versionIsSet() const
{
    return m_VersionIsSet;
}
void RegisterSchemaResponse::unsetVersion()
{
    m_VersionIsSet = false;
}
std::string RegisterSchemaResponse::getSchemaType() const
{
    return m_SchemaType;
}
void RegisterSchemaResponse::setSchemaType(std::string const& value)
{
    m_SchemaType = value;
    m_SchemaTypeIsSet = true;
}
bool RegisterSchemaResponse::schemaTypeIsSet() const
{
    return m_SchemaTypeIsSet;
}
void RegisterSchemaResponse::unsetSchemaType()
{
    m_SchemaTypeIsSet = false;
}
std::vector<srclient::rest::model::SchemaReference> RegisterSchemaResponse::getReferences() const
{
    return m_References;
}
void RegisterSchemaResponse::setReferences(std::vector<srclient::rest::model::SchemaReference> const& value)
{
    m_References = value;
    m_ReferencesIsSet = true;
}
bool RegisterSchemaResponse::referencesIsSet() const
{
    return m_ReferencesIsSet;
}
void RegisterSchemaResponse::unsetReferences()
{
    m_ReferencesIsSet = false;
}
srclient::rest::model::Metadata RegisterSchemaResponse::getMetadata() const
{
    return m_Metadata;
}
void RegisterSchemaResponse::setMetadata(srclient::rest::model::Metadata const& value)
{
    m_Metadata = value;
    m_MetadataIsSet = true;
}
bool RegisterSchemaResponse::metadataIsSet() const
{
    return m_MetadataIsSet;
}
void RegisterSchemaResponse::unsetMetadata()
{
    m_MetadataIsSet = false;
}
srclient::rest::model::RuleSet RegisterSchemaResponse::getRuleSet() const
{
    return m_RuleSet;
}
void RegisterSchemaResponse::setRuleSet(srclient::rest::model::RuleSet const& value)
{
    m_RuleSet = value;
    m_RuleSetIsSet = true;
}
bool RegisterSchemaResponse::ruleSetIsSet() const
{
    return m_RuleSetIsSet;
}
void RegisterSchemaResponse::unsetRuleSet()
{
    m_RuleSetIsSet = false;
}
std::string RegisterSchemaResponse::getSchema() const
{
    return m_Schema;
}
void RegisterSchemaResponse::setSchema(std::string const& value)
{
    m_Schema = value;
    m_SchemaIsSet = true;
}
bool RegisterSchemaResponse::schemaIsSet() const
{
    return m_SchemaIsSet;
}
void RegisterSchemaResponse::unsetSchema()
{
    m_SchemaIsSet = false;
}


} // namespace srclient::rest::model

