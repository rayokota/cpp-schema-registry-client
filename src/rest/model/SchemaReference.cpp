/**
 * Confluent Schema Registry
 * No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "srclient/rest/model/SchemaReference.h"

#include <sstream>

namespace srclient::rest::model {

SchemaReference::SchemaReference() {
    // Optional members are initialized to std::nullopt by default
}

bool SchemaReference::operator==(const SchemaReference &rhs) const {
    return name_ == rhs.name_ && subject_ == rhs.subject_ &&
           version_ == rhs.version_;
}

bool SchemaReference::operator!=(const SchemaReference &rhs) const {
    return !(*this == rhs);
}

void to_json(nlohmann::json &j, const SchemaReference &o) {
    j = nlohmann::json::object();
    if (o.name_.has_value()) j["name"] = o.name_.value();
    if (o.subject_.has_value()) j["subject"] = o.subject_.value();
    if (o.version_.has_value()) j["version"] = o.version_.value();
}

void from_json(const nlohmann::json &j, SchemaReference &o) {
    if (j.find("name") != j.end()) {
        std::string temp;
        j.at("name").get_to(temp);
        o.name_ = temp;
    }
    if (j.find("subject") != j.end()) {
        std::string temp;
        j.at("subject").get_to(temp);
        o.subject_ = temp;
    }
    if (j.find("version") != j.end()) {
        int32_t temp;
        j.at("version").get_to(temp);
        o.version_ = temp;
    }
}

std::optional<std::string> SchemaReference::getName() const { return name_; }

void SchemaReference::setName(const std::optional<std::string> &value) {
    name_ = value;
}

std::optional<std::string> SchemaReference::getSubject() const {
    return subject_;
}

void SchemaReference::setSubject(const std::optional<std::string> &value) {
    subject_ = value;
}

std::optional<int32_t> SchemaReference::getVersion() const { return version_; }

void SchemaReference::setVersion(const std::optional<int32_t> &value) {
    version_ = value;
}

} // namespace srclient::rest::model
