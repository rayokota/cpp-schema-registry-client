/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "srclient/rest/model/SchemaReference.h"

#include <sstream>

namespace srclient::rest::model
{

SchemaReference::SchemaReference()
{
    // Optional members are initialized to std::nullopt by default
}

bool SchemaReference::operator==(const SchemaReference& rhs) const
{
    return
        m_Name == rhs.m_Name &&
        m_Subject == rhs.m_Subject &&
        m_Version == rhs.m_Version;
}

bool SchemaReference::operator!=(const SchemaReference& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SchemaReference& o)
{
    j = nlohmann::json::object();
    if(o.m_Name.has_value())
        j["name"] = o.m_Name.value();
    if(o.m_Subject.has_value())
        j["subject"] = o.m_Subject.value();
    if(o.m_Version.has_value())
        j["version"] = o.m_Version.value();
}

void from_json(const nlohmann::json& j, SchemaReference& o)
{
    if(j.find("name") != j.end())
    {
        std::string temp;
        j.at("name").get_to(temp);
        o.m_Name = temp;
    } 
    if(j.find("subject") != j.end())
    {
        std::string temp;
        j.at("subject").get_to(temp);
        o.m_Subject = temp;
    } 
    if(j.find("version") != j.end())
    {
        int32_t temp;
        j.at("version").get_to(temp);
        o.m_Version = temp;
    } 
}

std::optional<std::string> SchemaReference::getName() const
{
    return m_Name;
}

void SchemaReference::setName(const std::optional<std::string>& value)
{
    m_Name = value;
}

std::optional<std::string> SchemaReference::getSubject() const
{
    return m_Subject;
}

void SchemaReference::setSubject(const std::optional<std::string>& value)
{
    m_Subject = value;
}

std::optional<int32_t> SchemaReference::getVersion() const
{
    return m_Version;
}

void SchemaReference::setVersion(const std::optional<int32_t>& value)
{
    m_Version = value;
}

} // namespace srclient::rest::model

