/**
* Confluent Schema Registry
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: v1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SchemaRegistryClient/rest/model/SchemaTags.h"
#include "SchemaRegistryClient/rest/model/Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

SchemaTags::SchemaTags()
{
    m_SchemaEntityIsSet = false;
    m_TagsIsSet = false;
    
}

void SchemaTags::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool SchemaTags::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool SchemaTags::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "SchemaTags" : pathPrefix;

             
    if (tagsIsSet())
    {
        const std::vector<std::string>& value = m_Tags;
        const std::string currentValuePath = _pathPrefix + ".tags";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
    
    return success;
}

bool SchemaTags::operator==(const SchemaTags& rhs) const
{
    return
    
    
    
    ((!schemaEntityIsSet() && !rhs.schemaEntityIsSet()) || (schemaEntityIsSet() && rhs.schemaEntityIsSet() && getSchemaEntity() == rhs.getSchemaEntity())) &&
    
    
    ((!tagsIsSet() && !rhs.tagsIsSet()) || (tagsIsSet() && rhs.tagsIsSet() && getTags() == rhs.getTags()))
    
    ;
}

bool SchemaTags::operator!=(const SchemaTags& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SchemaTags& o)
{
    j = nlohmann::json::object();
    if(o.schemaEntityIsSet())
        j["schemaEntity"] = o.m_SchemaEntity;
    if(o.tagsIsSet() || !o.m_Tags.empty())
        j["tags"] = o.m_Tags;
    
}

void from_json(const nlohmann::json& j, SchemaTags& o)
{
    if(j.find("schemaEntity") != j.end())
    {
        j.at("schemaEntity").get_to(o.m_SchemaEntity);
        o.m_SchemaEntityIsSet = true;
    } 
    if(j.find("tags") != j.end())
    {
        j.at("tags").get_to(o.m_Tags);
        o.m_TagsIsSet = true;
    } 
    
}

org::openapitools::server::model::SchemaEntity SchemaTags::getSchemaEntity() const
{
    return m_SchemaEntity;
}
void SchemaTags::setSchemaEntity(org::openapitools::server::model::SchemaEntity const& value)
{
    m_SchemaEntity = value;
    m_SchemaEntityIsSet = true;
}
bool SchemaTags::schemaEntityIsSet() const
{
    return m_SchemaEntityIsSet;
}
void SchemaTags::unsetSchemaEntity()
{
    m_SchemaEntityIsSet = false;
}
std::vector<std::string> SchemaTags::getTags() const
{
    return m_Tags;
}
void SchemaTags::setTags(std::vector<std::string> const& value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}
bool SchemaTags::tagsIsSet() const
{
    return m_TagsIsSet;
}
void SchemaTags::unsetTags()
{
    m_TagsIsSet = false;
}


} // namespace org::openapitools::server::model

