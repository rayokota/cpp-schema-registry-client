// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: test/example.proto
// Protobuf C++ Version: 5.29.3

#ifndef test_2fexample_2eproto_2epb_2eh
#define test_2fexample_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "confluent/meta.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_test_2fexample_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2fexample_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_test_2fexample_2eproto;
namespace test {
class Author;
struct AuthorDefaultTypeInternal;
extern AuthorDefaultTypeInternal _Author_default_instance_;
class Pizza;
struct PizzaDefaultTypeInternal;
extern PizzaDefaultTypeInternal _Pizza_default_instance_;
}  // namespace test
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace test {

// ===================================================================


// -------------------------------------------------------------------

class Pizza final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:test.Pizza) */ {
 public:
  inline Pizza() : Pizza(nullptr) {}
  ~Pizza() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Pizza* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Pizza));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Pizza(
      ::google::protobuf::internal::ConstantInitialized);

  inline Pizza(const Pizza& from) : Pizza(nullptr, from) {}
  inline Pizza(Pizza&& from) noexcept
      : Pizza(nullptr, std::move(from)) {}
  inline Pizza& operator=(const Pizza& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pizza& operator=(Pizza&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pizza& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pizza* internal_default_instance() {
    return reinterpret_cast<const Pizza*>(
        &_Pizza_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(Pizza& a, Pizza& b) { a.Swap(&b); }
  inline void Swap(Pizza* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pizza* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pizza* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Pizza>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Pizza& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Pizza& from) { Pizza::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Pizza* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "test.Pizza"; }

 protected:
  explicit Pizza(::google::protobuf::Arena* arena);
  Pizza(::google::protobuf::Arena* arena, const Pizza& from);
  Pizza(::google::protobuf::Arena* arena, Pizza&& from) noexcept
      : Pizza(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kToppingsFieldNumber = 2,
    kSizeFieldNumber = 1,
  };
  // repeated string toppings = 2;
  int toppings_size() const;
  private:
  int _internal_toppings_size() const;

  public:
  void clear_toppings() ;
  const std::string& toppings(int index) const;
  std::string* mutable_toppings(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_toppings(int index, Arg_&& value, Args_... args);
  std::string* add_toppings();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_toppings(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& toppings() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_toppings();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_toppings() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_toppings();

  public:
  // string size = 1;
  void clear_size() ;
  const std::string& size() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_size(Arg_&& arg, Args_... args);
  std::string* mutable_size();
  PROTOBUF_NODISCARD std::string* release_size();
  void set_allocated_size(std::string* value);

  private:
  const std::string& _internal_size() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_size(
      const std::string& value);
  std::string* _internal_mutable_size();

  public:
  // @@protoc_insertion_point(class_scope:test.Pizza)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      31, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Pizza& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> toppings_;
    ::google::protobuf::internal::ArenaStringPtr size_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2fexample_2eproto;
};
// -------------------------------------------------------------------

class Author final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:test.Author) */ {
 public:
  inline Author() : Author(nullptr) {}
  ~Author() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Author* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Author));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Author(
      ::google::protobuf::internal::ConstantInitialized);

  inline Author(const Author& from) : Author(nullptr, from) {}
  inline Author(Author&& from) noexcept
      : Author(nullptr, std::move(from)) {}
  inline Author& operator=(const Author& from) {
    CopyFrom(from);
    return *this;
  }
  inline Author& operator=(Author&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Author& default_instance() {
    return *internal_default_instance();
  }
  enum PiiOneofCase {
    kOneofMessage = 5,
    kOneofString = 6,
    PII_ONEOF_NOT_SET = 0,
  };
  static inline const Author* internal_default_instance() {
    return reinterpret_cast<const Author*>(
        &_Author_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Author& a, Author& b) { a.Swap(&b); }
  inline void Swap(Author* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Author* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Author* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Author>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Author& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Author& from) { Author::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Author* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "test.Author"; }

 protected:
  explicit Author(::google::protobuf::Arena* arena);
  Author(::google::protobuf::Arena* arena, const Author& from);
  Author(::google::protobuf::Arena* arena, Author&& from) noexcept
      : Author(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kWorksFieldNumber = 4,
    kNameFieldNumber = 1,
    kPictureFieldNumber = 3,
    kIdFieldNumber = 2,
    kOneofMessageFieldNumber = 5,
    kOneofStringFieldNumber = 6,
  };
  // repeated string works = 4;
  int works_size() const;
  private:
  int _internal_works_size() const;

  public:
  void clear_works() ;
  const std::string& works(int index) const;
  std::string* mutable_works(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_works(int index, Arg_&& value, Args_... args);
  std::string* add_works();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_works(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& works() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_works();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_works() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_works();

  public:
  // string name = 1 [(.confluent.field_meta) = {
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // bytes picture = 3 [(.confluent.field_meta) = {
  void clear_picture() ;
  const std::string& picture() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_picture(Arg_&& arg, Args_... args);
  std::string* mutable_picture();
  PROTOBUF_NODISCARD std::string* release_picture();
  void set_allocated_picture(std::string* value);

  private:
  const std::string& _internal_picture() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_picture(
      const std::string& value);
  std::string* _internal_mutable_picture();

  public:
  // int32 id = 2;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // .test.Pizza oneof_message = 5;
  bool has_oneof_message() const;
  private:
  bool _internal_has_oneof_message() const;

  public:
  void clear_oneof_message() ;
  const ::test::Pizza& oneof_message() const;
  PROTOBUF_NODISCARD ::test::Pizza* release_oneof_message();
  ::test::Pizza* mutable_oneof_message();
  void set_allocated_oneof_message(::test::Pizza* value);
  void unsafe_arena_set_allocated_oneof_message(::test::Pizza* value);
  ::test::Pizza* unsafe_arena_release_oneof_message();

  private:
  const ::test::Pizza& _internal_oneof_message() const;
  ::test::Pizza* _internal_mutable_oneof_message();

  public:
  // string oneof_string = 6 [(.confluent.field_meta) = {
  bool has_oneof_string() const;
  void clear_oneof_string() ;
  const std::string& oneof_string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_oneof_string(Arg_&& arg, Args_... args);
  std::string* mutable_oneof_string();
  PROTOBUF_NODISCARD std::string* release_oneof_string();
  void set_allocated_oneof_string(std::string* value);

  private:
  const std::string& _internal_oneof_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oneof_string(
      const std::string& value);
  std::string* _internal_mutable_oneof_string();

  public:
  void clear_pii_oneof();
  PiiOneofCase pii_oneof_case() const;
  // @@protoc_insertion_point(class_scope:test.Author)
 private:
  class _Internal;
  void set_has_oneof_message();
  void set_has_oneof_string();
  inline bool has_pii_oneof() const;
  inline void clear_has_pii_oneof();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 6, 1,
      41, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Author& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> works_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr picture_;
    ::int32_t id_;
    union PiiOneofUnion {
      constexpr PiiOneofUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::test::Pizza* oneof_message_;
      ::google::protobuf::internal::ArenaStringPtr oneof_string_;
    } pii_oneof_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2fexample_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Author

// string name = 1 [(.confluent.field_meta) = {
inline void Author::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Author::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:test.Author.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Author::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:test.Author.name)
}
inline std::string* Author::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:test.Author.name)
  return _s;
}
inline const std::string& Author::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Author::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Author::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Author::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:test.Author.name)
  return _impl_.name_.Release();
}
inline void Author::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:test.Author.name)
}

// int32 id = 2;
inline void Author::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t Author::id() const {
  // @@protoc_insertion_point(field_get:test.Author.id)
  return _internal_id();
}
inline void Author::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:test.Author.id)
}
inline ::int32_t Author::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void Author::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// bytes picture = 3 [(.confluent.field_meta) = {
inline void Author::clear_picture() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.picture_.ClearToEmpty();
}
inline const std::string& Author::picture() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:test.Author.picture)
  return _internal_picture();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Author::set_picture(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.picture_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:test.Author.picture)
}
inline std::string* Author::mutable_picture() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_picture();
  // @@protoc_insertion_point(field_mutable:test.Author.picture)
  return _s;
}
inline const std::string& Author::_internal_picture() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.picture_.Get();
}
inline void Author::_internal_set_picture(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.picture_.Set(value, GetArena());
}
inline std::string* Author::_internal_mutable_picture() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.picture_.Mutable( GetArena());
}
inline std::string* Author::release_picture() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:test.Author.picture)
  return _impl_.picture_.Release();
}
inline void Author::set_allocated_picture(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.picture_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.picture_.IsDefault()) {
    _impl_.picture_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:test.Author.picture)
}

// repeated string works = 4;
inline int Author::_internal_works_size() const {
  return _internal_works().size();
}
inline int Author::works_size() const {
  return _internal_works_size();
}
inline void Author::clear_works() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.works_.Clear();
}
inline std::string* Author::add_works() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_works()->Add();
  // @@protoc_insertion_point(field_add_mutable:test.Author.works)
  return _s;
}
inline const std::string& Author::works(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:test.Author.works)
  return _internal_works().Get(index);
}
inline std::string* Author::mutable_works(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:test.Author.works)
  return _internal_mutable_works()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Author::set_works(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_works()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:test.Author.works)
}
template <typename Arg_, typename... Args_>
inline void Author::add_works(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_works(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:test.Author.works)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Author::works() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:test.Author.works)
  return _internal_works();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Author::mutable_works() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:test.Author.works)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_works();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Author::_internal_works() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.works_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Author::_internal_mutable_works() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.works_;
}

// .test.Pizza oneof_message = 5;
inline bool Author::has_oneof_message() const {
  return pii_oneof_case() == kOneofMessage;
}
inline bool Author::_internal_has_oneof_message() const {
  return pii_oneof_case() == kOneofMessage;
}
inline void Author::set_has_oneof_message() {
  _impl_._oneof_case_[0] = kOneofMessage;
}
inline void Author::clear_oneof_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (pii_oneof_case() == kOneofMessage) {
    if (GetArena() == nullptr) {
      delete _impl_.pii_oneof_.oneof_message_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.pii_oneof_.oneof_message_);
    }
    clear_has_pii_oneof();
  }
}
inline ::test::Pizza* Author::release_oneof_message() {
  // @@protoc_insertion_point(field_release:test.Author.oneof_message)
  if (pii_oneof_case() == kOneofMessage) {
    clear_has_pii_oneof();
    auto* temp = _impl_.pii_oneof_.oneof_message_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.pii_oneof_.oneof_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::test::Pizza& Author::_internal_oneof_message() const {
  return pii_oneof_case() == kOneofMessage ? *_impl_.pii_oneof_.oneof_message_ : reinterpret_cast<::test::Pizza&>(::test::_Pizza_default_instance_);
}
inline const ::test::Pizza& Author::oneof_message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:test.Author.oneof_message)
  return _internal_oneof_message();
}
inline ::test::Pizza* Author::unsafe_arena_release_oneof_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:test.Author.oneof_message)
  if (pii_oneof_case() == kOneofMessage) {
    clear_has_pii_oneof();
    auto* temp = _impl_.pii_oneof_.oneof_message_;
    _impl_.pii_oneof_.oneof_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Author::unsafe_arena_set_allocated_oneof_message(::test::Pizza* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_pii_oneof();
  if (value) {
    set_has_oneof_message();
    _impl_.pii_oneof_.oneof_message_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test.Author.oneof_message)
}
inline ::test::Pizza* Author::_internal_mutable_oneof_message() {
  if (pii_oneof_case() != kOneofMessage) {
    clear_pii_oneof();
    set_has_oneof_message();
    _impl_.pii_oneof_.oneof_message_ =
        ::google::protobuf::Message::DefaultConstruct<::test::Pizza>(GetArena());
  }
  return _impl_.pii_oneof_.oneof_message_;
}
inline ::test::Pizza* Author::mutable_oneof_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::test::Pizza* _msg = _internal_mutable_oneof_message();
  // @@protoc_insertion_point(field_mutable:test.Author.oneof_message)
  return _msg;
}

// string oneof_string = 6 [(.confluent.field_meta) = {
inline bool Author::has_oneof_string() const {
  return pii_oneof_case() == kOneofString;
}
inline void Author::set_has_oneof_string() {
  _impl_._oneof_case_[0] = kOneofString;
}
inline void Author::clear_oneof_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (pii_oneof_case() == kOneofString) {
    _impl_.pii_oneof_.oneof_string_.Destroy();
    clear_has_pii_oneof();
  }
}
inline const std::string& Author::oneof_string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:test.Author.oneof_string)
  return _internal_oneof_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Author::set_oneof_string(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (pii_oneof_case() != kOneofString) {
    clear_pii_oneof();

    set_has_oneof_string();
    _impl_.pii_oneof_.oneof_string_.InitDefault();
  }
  _impl_.pii_oneof_.oneof_string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:test.Author.oneof_string)
}
inline std::string* Author::mutable_oneof_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_oneof_string();
  // @@protoc_insertion_point(field_mutable:test.Author.oneof_string)
  return _s;
}
inline const std::string& Author::_internal_oneof_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (pii_oneof_case() != kOneofString) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.pii_oneof_.oneof_string_.Get();
}
inline void Author::_internal_set_oneof_string(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (pii_oneof_case() != kOneofString) {
    clear_pii_oneof();

    set_has_oneof_string();
    _impl_.pii_oneof_.oneof_string_.InitDefault();
  }
  _impl_.pii_oneof_.oneof_string_.Set(value, GetArena());
}
inline std::string* Author::_internal_mutable_oneof_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (pii_oneof_case() != kOneofString) {
    clear_pii_oneof();

    set_has_oneof_string();
    _impl_.pii_oneof_.oneof_string_.InitDefault();
  }
  return _impl_.pii_oneof_.oneof_string_.Mutable( GetArena());
}
inline std::string* Author::release_oneof_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:test.Author.oneof_string)
  if (pii_oneof_case() != kOneofString) {
    return nullptr;
  }
  clear_has_pii_oneof();
  return _impl_.pii_oneof_.oneof_string_.Release();
}
inline void Author::set_allocated_oneof_string(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_pii_oneof()) {
    clear_pii_oneof();
  }
  if (value != nullptr) {
    set_has_oneof_string();
    _impl_.pii_oneof_.oneof_string_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:test.Author.oneof_string)
}

inline bool Author::has_pii_oneof() const {
  return pii_oneof_case() != PII_ONEOF_NOT_SET;
}
inline void Author::clear_has_pii_oneof() {
  _impl_._oneof_case_[0] = PII_ONEOF_NOT_SET;
}
inline Author::PiiOneofCase Author::pii_oneof_case() const {
  return Author::PiiOneofCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// Pizza

// string size = 1;
inline void Pizza::clear_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_.ClearToEmpty();
}
inline const std::string& Pizza::size() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:test.Pizza.size)
  return _internal_size();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Pizza::set_size(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:test.Pizza.size)
}
inline std::string* Pizza::mutable_size() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:test.Pizza.size)
  return _s;
}
inline const std::string& Pizza::_internal_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.size_.Get();
}
inline void Pizza::_internal_set_size(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_.Set(value, GetArena());
}
inline std::string* Pizza::_internal_mutable_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.size_.Mutable( GetArena());
}
inline std::string* Pizza::release_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:test.Pizza.size)
  return _impl_.size_.Release();
}
inline void Pizza::set_allocated_size(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.size_.IsDefault()) {
    _impl_.size_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:test.Pizza.size)
}

// repeated string toppings = 2;
inline int Pizza::_internal_toppings_size() const {
  return _internal_toppings().size();
}
inline int Pizza::toppings_size() const {
  return _internal_toppings_size();
}
inline void Pizza::clear_toppings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.toppings_.Clear();
}
inline std::string* Pizza::add_toppings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_toppings()->Add();
  // @@protoc_insertion_point(field_add_mutable:test.Pizza.toppings)
  return _s;
}
inline const std::string& Pizza::toppings(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:test.Pizza.toppings)
  return _internal_toppings().Get(index);
}
inline std::string* Pizza::mutable_toppings(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:test.Pizza.toppings)
  return _internal_mutable_toppings()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void Pizza::set_toppings(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_toppings()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:test.Pizza.toppings)
}
template <typename Arg_, typename... Args_>
inline void Pizza::add_toppings(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_toppings(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:test.Pizza.toppings)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Pizza::toppings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:test.Pizza.toppings)
  return _internal_toppings();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Pizza::mutable_toppings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:test.Pizza.toppings)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_toppings();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
Pizza::_internal_toppings() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.toppings_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
Pizza::_internal_mutable_toppings() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.toppings_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace test


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // test_2fexample_2eproto_2epb_2eh
