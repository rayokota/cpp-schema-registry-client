// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: test/test.proto
// Protobuf C++ Version: 5.29.3

#ifndef test_2ftest_2eproto_2epb_2eh
#define test_2ftest_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/descriptor.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_test_2ftest_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2ftest_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_test_2ftest_2eproto;
namespace test {
class TestMessage;
struct TestMessageDefaultTypeInternal;
extern TestMessageDefaultTypeInternal _TestMessage_default_instance_;
}  // namespace test
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace test {

// ===================================================================


// -------------------------------------------------------------------

class TestMessage final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:test.TestMessage) */ {
 public:
  inline TestMessage() : TestMessage(nullptr) {}
  ~TestMessage() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TestMessage* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TestMessage));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TestMessage(
      ::google::protobuf::internal::ConstantInitialized);

  inline TestMessage(const TestMessage& from) : TestMessage(nullptr, from) {}
  inline TestMessage(TestMessage&& from) noexcept
      : TestMessage(nullptr, std::move(from)) {}
  inline TestMessage& operator=(const TestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMessage& operator=(TestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestMessage* internal_default_instance() {
    return reinterpret_cast<const TestMessage*>(
        &_TestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(TestMessage& a, TestMessage& b) { a.Swap(&b); }
  inline void Swap(TestMessage* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestMessage* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TestMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TestMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TestMessage& from) { TestMessage::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TestMessage* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "test.TestMessage"; }

 protected:
  explicit TestMessage(::google::protobuf::Arena* arena);
  TestMessage(::google::protobuf::Arena* arena, const TestMessage& from);
  TestMessage(::google::protobuf::Arena* arena, TestMessage&& from) noexcept
      : TestMessage(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTestStringFieldNumber = 1,
    kTestBytesFieldNumber = 3,
    kTestBoolFieldNumber = 2,
    kTestFloatFieldNumber = 5,
    kTestDoubleFieldNumber = 4,
    kTestFixed64FieldNumber = 7,
    kTestFixed32FieldNumber = 6,
    kTestInt32FieldNumber = 8,
    kTestInt64FieldNumber = 9,
    kTestSfixed64FieldNumber = 11,
    kTestSfixed32FieldNumber = 10,
    kTestSint32FieldNumber = 12,
    kTestSint64FieldNumber = 13,
    kTestUint64FieldNumber = 15,
    kTestUint32FieldNumber = 14,
  };
  // string test_string = 1;
  void clear_test_string() ;
  const std::string& test_string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_test_string(Arg_&& arg, Args_... args);
  std::string* mutable_test_string();
  PROTOBUF_NODISCARD std::string* release_test_string();
  void set_allocated_test_string(std::string* value);

  private:
  const std::string& _internal_test_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_test_string(
      const std::string& value);
  std::string* _internal_mutable_test_string();

  public:
  // bytes test_bytes = 3;
  void clear_test_bytes() ;
  const std::string& test_bytes() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_test_bytes(Arg_&& arg, Args_... args);
  std::string* mutable_test_bytes();
  PROTOBUF_NODISCARD std::string* release_test_bytes();
  void set_allocated_test_bytes(std::string* value);

  private:
  const std::string& _internal_test_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_test_bytes(
      const std::string& value);
  std::string* _internal_mutable_test_bytes();

  public:
  // bool test_bool = 2;
  void clear_test_bool() ;
  bool test_bool() const;
  void set_test_bool(bool value);

  private:
  bool _internal_test_bool() const;
  void _internal_set_test_bool(bool value);

  public:
  // float test_float = 5;
  void clear_test_float() ;
  float test_float() const;
  void set_test_float(float value);

  private:
  float _internal_test_float() const;
  void _internal_set_test_float(float value);

  public:
  // double test_double = 4;
  void clear_test_double() ;
  double test_double() const;
  void set_test_double(double value);

  private:
  double _internal_test_double() const;
  void _internal_set_test_double(double value);

  public:
  // fixed64 test_fixed64 = 7;
  void clear_test_fixed64() ;
  ::uint64_t test_fixed64() const;
  void set_test_fixed64(::uint64_t value);

  private:
  ::uint64_t _internal_test_fixed64() const;
  void _internal_set_test_fixed64(::uint64_t value);

  public:
  // fixed32 test_fixed32 = 6;
  void clear_test_fixed32() ;
  ::uint32_t test_fixed32() const;
  void set_test_fixed32(::uint32_t value);

  private:
  ::uint32_t _internal_test_fixed32() const;
  void _internal_set_test_fixed32(::uint32_t value);

  public:
  // int32 test_int32 = 8;
  void clear_test_int32() ;
  ::int32_t test_int32() const;
  void set_test_int32(::int32_t value);

  private:
  ::int32_t _internal_test_int32() const;
  void _internal_set_test_int32(::int32_t value);

  public:
  // int64 test_int64 = 9;
  void clear_test_int64() ;
  ::int64_t test_int64() const;
  void set_test_int64(::int64_t value);

  private:
  ::int64_t _internal_test_int64() const;
  void _internal_set_test_int64(::int64_t value);

  public:
  // sfixed64 test_sfixed64 = 11;
  void clear_test_sfixed64() ;
  ::int64_t test_sfixed64() const;
  void set_test_sfixed64(::int64_t value);

  private:
  ::int64_t _internal_test_sfixed64() const;
  void _internal_set_test_sfixed64(::int64_t value);

  public:
  // sfixed32 test_sfixed32 = 10;
  void clear_test_sfixed32() ;
  ::int32_t test_sfixed32() const;
  void set_test_sfixed32(::int32_t value);

  private:
  ::int32_t _internal_test_sfixed32() const;
  void _internal_set_test_sfixed32(::int32_t value);

  public:
  // sint32 test_sint32 = 12;
  void clear_test_sint32() ;
  ::int32_t test_sint32() const;
  void set_test_sint32(::int32_t value);

  private:
  ::int32_t _internal_test_sint32() const;
  void _internal_set_test_sint32(::int32_t value);

  public:
  // sint64 test_sint64 = 13;
  void clear_test_sint64() ;
  ::int64_t test_sint64() const;
  void set_test_sint64(::int64_t value);

  private:
  ::int64_t _internal_test_sint64() const;
  void _internal_set_test_sint64(::int64_t value);

  public:
  // uint64 test_uint64 = 15;
  void clear_test_uint64() ;
  ::uint64_t test_uint64() const;
  void set_test_uint64(::uint64_t value);

  private:
  ::uint64_t _internal_test_uint64() const;
  void _internal_set_test_uint64(::uint64_t value);

  public:
  // uint32 test_uint32 = 14;
  void clear_test_uint32() ;
  ::uint32_t test_uint32() const;
  void set_test_uint32(::uint32_t value);

  private:
  ::uint32_t _internal_test_uint32() const;
  void _internal_set_test_uint32(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:test.TestMessage)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 15, 0,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TestMessage& from_msg);
    ::google::protobuf::internal::ArenaStringPtr test_string_;
    ::google::protobuf::internal::ArenaStringPtr test_bytes_;
    bool test_bool_;
    float test_float_;
    double test_double_;
    ::uint64_t test_fixed64_;
    ::uint32_t test_fixed32_;
    ::int32_t test_int32_;
    ::int64_t test_int64_;
    ::int64_t test_sfixed64_;
    ::int32_t test_sfixed32_;
    ::int32_t test_sint32_;
    ::int64_t test_sint64_;
    ::uint64_t test_uint64_;
    ::uint32_t test_uint32_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_2ftest_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// TestMessage

// string test_string = 1;
inline void TestMessage::clear_test_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_string_.ClearToEmpty();
}
inline const std::string& TestMessage::test_string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:test.TestMessage.test_string)
  return _internal_test_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestMessage::set_test_string(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:test.TestMessage.test_string)
}
inline std::string* TestMessage::mutable_test_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_test_string();
  // @@protoc_insertion_point(field_mutable:test.TestMessage.test_string)
  return _s;
}
inline const std::string& TestMessage::_internal_test_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_string_.Get();
}
inline void TestMessage::_internal_set_test_string(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_string_.Set(value, GetArena());
}
inline std::string* TestMessage::_internal_mutable_test_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.test_string_.Mutable( GetArena());
}
inline std::string* TestMessage::release_test_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:test.TestMessage.test_string)
  return _impl_.test_string_.Release();
}
inline void TestMessage::set_allocated_test_string(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_string_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.test_string_.IsDefault()) {
    _impl_.test_string_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:test.TestMessage.test_string)
}

// bool test_bool = 2;
inline void TestMessage::clear_test_bool() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_bool_ = false;
}
inline bool TestMessage::test_bool() const {
  // @@protoc_insertion_point(field_get:test.TestMessage.test_bool)
  return _internal_test_bool();
}
inline void TestMessage::set_test_bool(bool value) {
  _internal_set_test_bool(value);
  // @@protoc_insertion_point(field_set:test.TestMessage.test_bool)
}
inline bool TestMessage::_internal_test_bool() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_bool_;
}
inline void TestMessage::_internal_set_test_bool(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_bool_ = value;
}

// bytes test_bytes = 3;
inline void TestMessage::clear_test_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_bytes_.ClearToEmpty();
}
inline const std::string& TestMessage::test_bytes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:test.TestMessage.test_bytes)
  return _internal_test_bytes();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TestMessage::set_test_bytes(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:test.TestMessage.test_bytes)
}
inline std::string* TestMessage::mutable_test_bytes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_test_bytes();
  // @@protoc_insertion_point(field_mutable:test.TestMessage.test_bytes)
  return _s;
}
inline const std::string& TestMessage::_internal_test_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_bytes_.Get();
}
inline void TestMessage::_internal_set_test_bytes(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_bytes_.Set(value, GetArena());
}
inline std::string* TestMessage::_internal_mutable_test_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.test_bytes_.Mutable( GetArena());
}
inline std::string* TestMessage::release_test_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:test.TestMessage.test_bytes)
  return _impl_.test_bytes_.Release();
}
inline void TestMessage::set_allocated_test_bytes(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_bytes_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.test_bytes_.IsDefault()) {
    _impl_.test_bytes_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:test.TestMessage.test_bytes)
}

// double test_double = 4;
inline void TestMessage::clear_test_double() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_double_ = 0;
}
inline double TestMessage::test_double() const {
  // @@protoc_insertion_point(field_get:test.TestMessage.test_double)
  return _internal_test_double();
}
inline void TestMessage::set_test_double(double value) {
  _internal_set_test_double(value);
  // @@protoc_insertion_point(field_set:test.TestMessage.test_double)
}
inline double TestMessage::_internal_test_double() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_double_;
}
inline void TestMessage::_internal_set_test_double(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_double_ = value;
}

// float test_float = 5;
inline void TestMessage::clear_test_float() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_float_ = 0;
}
inline float TestMessage::test_float() const {
  // @@protoc_insertion_point(field_get:test.TestMessage.test_float)
  return _internal_test_float();
}
inline void TestMessage::set_test_float(float value) {
  _internal_set_test_float(value);
  // @@protoc_insertion_point(field_set:test.TestMessage.test_float)
}
inline float TestMessage::_internal_test_float() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_float_;
}
inline void TestMessage::_internal_set_test_float(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_float_ = value;
}

// fixed32 test_fixed32 = 6;
inline void TestMessage::clear_test_fixed32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_fixed32_ = 0u;
}
inline ::uint32_t TestMessage::test_fixed32() const {
  // @@protoc_insertion_point(field_get:test.TestMessage.test_fixed32)
  return _internal_test_fixed32();
}
inline void TestMessage::set_test_fixed32(::uint32_t value) {
  _internal_set_test_fixed32(value);
  // @@protoc_insertion_point(field_set:test.TestMessage.test_fixed32)
}
inline ::uint32_t TestMessage::_internal_test_fixed32() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_fixed32_;
}
inline void TestMessage::_internal_set_test_fixed32(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_fixed32_ = value;
}

// fixed64 test_fixed64 = 7;
inline void TestMessage::clear_test_fixed64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_fixed64_ = ::uint64_t{0u};
}
inline ::uint64_t TestMessage::test_fixed64() const {
  // @@protoc_insertion_point(field_get:test.TestMessage.test_fixed64)
  return _internal_test_fixed64();
}
inline void TestMessage::set_test_fixed64(::uint64_t value) {
  _internal_set_test_fixed64(value);
  // @@protoc_insertion_point(field_set:test.TestMessage.test_fixed64)
}
inline ::uint64_t TestMessage::_internal_test_fixed64() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_fixed64_;
}
inline void TestMessage::_internal_set_test_fixed64(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_fixed64_ = value;
}

// int32 test_int32 = 8;
inline void TestMessage::clear_test_int32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_int32_ = 0;
}
inline ::int32_t TestMessage::test_int32() const {
  // @@protoc_insertion_point(field_get:test.TestMessage.test_int32)
  return _internal_test_int32();
}
inline void TestMessage::set_test_int32(::int32_t value) {
  _internal_set_test_int32(value);
  // @@protoc_insertion_point(field_set:test.TestMessage.test_int32)
}
inline ::int32_t TestMessage::_internal_test_int32() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_int32_;
}
inline void TestMessage::_internal_set_test_int32(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_int32_ = value;
}

// int64 test_int64 = 9;
inline void TestMessage::clear_test_int64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_int64_ = ::int64_t{0};
}
inline ::int64_t TestMessage::test_int64() const {
  // @@protoc_insertion_point(field_get:test.TestMessage.test_int64)
  return _internal_test_int64();
}
inline void TestMessage::set_test_int64(::int64_t value) {
  _internal_set_test_int64(value);
  // @@protoc_insertion_point(field_set:test.TestMessage.test_int64)
}
inline ::int64_t TestMessage::_internal_test_int64() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_int64_;
}
inline void TestMessage::_internal_set_test_int64(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_int64_ = value;
}

// sfixed32 test_sfixed32 = 10;
inline void TestMessage::clear_test_sfixed32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_sfixed32_ = 0;
}
inline ::int32_t TestMessage::test_sfixed32() const {
  // @@protoc_insertion_point(field_get:test.TestMessage.test_sfixed32)
  return _internal_test_sfixed32();
}
inline void TestMessage::set_test_sfixed32(::int32_t value) {
  _internal_set_test_sfixed32(value);
  // @@protoc_insertion_point(field_set:test.TestMessage.test_sfixed32)
}
inline ::int32_t TestMessage::_internal_test_sfixed32() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_sfixed32_;
}
inline void TestMessage::_internal_set_test_sfixed32(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_sfixed32_ = value;
}

// sfixed64 test_sfixed64 = 11;
inline void TestMessage::clear_test_sfixed64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_sfixed64_ = ::int64_t{0};
}
inline ::int64_t TestMessage::test_sfixed64() const {
  // @@protoc_insertion_point(field_get:test.TestMessage.test_sfixed64)
  return _internal_test_sfixed64();
}
inline void TestMessage::set_test_sfixed64(::int64_t value) {
  _internal_set_test_sfixed64(value);
  // @@protoc_insertion_point(field_set:test.TestMessage.test_sfixed64)
}
inline ::int64_t TestMessage::_internal_test_sfixed64() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_sfixed64_;
}
inline void TestMessage::_internal_set_test_sfixed64(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_sfixed64_ = value;
}

// sint32 test_sint32 = 12;
inline void TestMessage::clear_test_sint32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_sint32_ = 0;
}
inline ::int32_t TestMessage::test_sint32() const {
  // @@protoc_insertion_point(field_get:test.TestMessage.test_sint32)
  return _internal_test_sint32();
}
inline void TestMessage::set_test_sint32(::int32_t value) {
  _internal_set_test_sint32(value);
  // @@protoc_insertion_point(field_set:test.TestMessage.test_sint32)
}
inline ::int32_t TestMessage::_internal_test_sint32() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_sint32_;
}
inline void TestMessage::_internal_set_test_sint32(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_sint32_ = value;
}

// sint64 test_sint64 = 13;
inline void TestMessage::clear_test_sint64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_sint64_ = ::int64_t{0};
}
inline ::int64_t TestMessage::test_sint64() const {
  // @@protoc_insertion_point(field_get:test.TestMessage.test_sint64)
  return _internal_test_sint64();
}
inline void TestMessage::set_test_sint64(::int64_t value) {
  _internal_set_test_sint64(value);
  // @@protoc_insertion_point(field_set:test.TestMessage.test_sint64)
}
inline ::int64_t TestMessage::_internal_test_sint64() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_sint64_;
}
inline void TestMessage::_internal_set_test_sint64(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_sint64_ = value;
}

// uint32 test_uint32 = 14;
inline void TestMessage::clear_test_uint32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_uint32_ = 0u;
}
inline ::uint32_t TestMessage::test_uint32() const {
  // @@protoc_insertion_point(field_get:test.TestMessage.test_uint32)
  return _internal_test_uint32();
}
inline void TestMessage::set_test_uint32(::uint32_t value) {
  _internal_set_test_uint32(value);
  // @@protoc_insertion_point(field_set:test.TestMessage.test_uint32)
}
inline ::uint32_t TestMessage::_internal_test_uint32() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_uint32_;
}
inline void TestMessage::_internal_set_test_uint32(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_uint32_ = value;
}

// uint64 test_uint64 = 15;
inline void TestMessage::clear_test_uint64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_uint64_ = ::uint64_t{0u};
}
inline ::uint64_t TestMessage::test_uint64() const {
  // @@protoc_insertion_point(field_get:test.TestMessage.test_uint64)
  return _internal_test_uint64();
}
inline void TestMessage::set_test_uint64(::uint64_t value) {
  _internal_set_test_uint64(value);
  // @@protoc_insertion_point(field_set:test.TestMessage.test_uint64)
}
inline ::uint64_t TestMessage::_internal_test_uint64() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.test_uint64_;
}
inline void TestMessage::_internal_set_test_uint64(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.test_uint64_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace test


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // test_2ftest_2eproto_2epb_2eh
