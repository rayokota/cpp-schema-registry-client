#
# Confluent Schema Registry
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: 1.0.0
#
# https://openapi-generator.tech
#
# NOTE: Auto generated by OpenAPI Generator (https://openapi-generator.tech).

cmake_minimum_required(VERSION 3.22)

# Set policies for better compatibility
if(POLICY CMP0135)
    cmake_policy(SET CMP0135 NEW)  # Set timestamp policy for URL downloads
endif()

project(srclient CXX)

# Force -fPIC even if the project is configured for building a static library.
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD 17)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Find clang-tidy
find_program(CLANG_TIDY_EXE clang-tidy)

function(enable_clang_tidy target)
    if(CLANG_TIDY_EXE)
        set_target_properties(${target} PROPERTIES
            CXX_CLANG_TIDY "${CLANG_TIDY_EXE}"
            #-checks=-*,readability-*,performance-*,bugprone-*;
            #-header-filter=.*"
        )
    endif()
endfunction()

include(FetchContent)

FetchContent_Declare(avrocpp
        GIT_REPOSITORY https://github.com/apache/avro.git
        GIT_TAG release-1.12.0
        EXCLUDE_FROM_ALL
        SOURCE_SUBDIR lang/c++)

FetchContent_MakeAvailable(avrocpp)

FetchContent_Declare(
        jsoncons
        GIT_REPOSITORY https://github.com/danielaparker/jsoncons.git
        GIT_TAG        v1.3.2
)
# Disable jsoncons unit tests
set(JSONCONS_BUILD_TESTS OFF CACHE BOOL "Build jsoncons tests" FORCE)
FetchContent_MakeAvailable(jsoncons)

# Import Tink as an in-tree dependency.
# See https://developers.google.com/tink/setup/cc
FetchContent_Declare(
        tink
        URL       https://github.com/tink-crypto/tink-cc/archive/refs/tags/v2.4.0.zip
        URL_HASH  SHA256=06c4d49b0b1357f0b8c3abc77a7d920130dc868e4597d432a9ce1cda4f65e382
)
FetchContent_GetProperties(tink)
if(NOT googletest_POPULATED)
    FetchContent_Populate(tink)
    add_subdirectory(${tink_SOURCE_DIR} ${tink_BINARY_DIR} EXCLUDE_FROM_ALL)
endif()

# Note: absl is provided by Tink, so we don't find_package it separately
find_package(Boost REQUIRED)
find_package(nlohmann_json 3.12.0 REQUIRED)
find_package(Protobuf REQUIRED)

# Function to compile protobuf files in the proto/ directory
function(compile_project_proto_files)
    # Find all .proto files in the proto/ directory only
    file(GLOB_RECURSE PROTO_FILES "${CMAKE_CURRENT_SOURCE_DIR}/proto/*.proto")
    
    if(PROTO_FILES)
        # Create directory for generated files
        set(PROTO_GEN_DIR "${CMAKE_CURRENT_BINARY_DIR}/generated_proto")
        file(MAKE_DIRECTORY ${PROTO_GEN_DIR})
        
        foreach(PROTO_FILE ${PROTO_FILES})
            # Get the file name without extension
            get_filename_component(PROTO_NAME ${PROTO_FILE} NAME_WE)
            
            # Get relative path from proto/ directory for better organization
            file(RELATIVE_PATH PROTO_REL_PATH "${CMAKE_CURRENT_SOURCE_DIR}/proto" "${PROTO_FILE}")
            get_filename_component(PROTO_REL_DIR ${PROTO_REL_PATH} DIRECTORY)
            
            # Generate the output file names in a directory structure that matches the source
            set(PROTO_OUT_DIR "${PROTO_GEN_DIR}/${PROTO_REL_DIR}")
            file(MAKE_DIRECTORY ${PROTO_OUT_DIR})
            set(PROTO_SRCS "${PROTO_OUT_DIR}/${PROTO_NAME}.pb.cc")
            set(PROTO_HDRS "${PROTO_OUT_DIR}/${PROTO_NAME}.pb.h")
            
            # Add custom command to generate C++ files from .proto
            add_custom_command(
                OUTPUT ${PROTO_SRCS} ${PROTO_HDRS}
                COMMAND ${Protobuf_PROTOC_EXECUTABLE}
                ARGS --cpp_out=${PROTO_GEN_DIR}
                     --proto_path=${CMAKE_CURRENT_SOURCE_DIR}/proto
                     ${PROTO_FILE}
                DEPENDS ${PROTO_FILE}
                COMMENT "Generating C++ code from proto/${PROTO_REL_PATH}"
                VERBATIM
            )
            
            # Add generated files to the list
            list(APPEND PROTO_GENERATED_SRCS ${PROTO_SRCS})
            list(APPEND PROTO_GENERATED_HDRS ${PROTO_HDRS})
        endforeach()
        
        # Set variables in parent scope
        set(PROJECT_PROTO_SOURCES ${PROTO_GENERATED_SRCS} PARENT_SCOPE)
        set(PROJECT_PROTO_HEADERS ${PROTO_GENERATED_HDRS} PARENT_SCOPE)
        set(PROJECT_PROTO_INCLUDE_DIR ${PROTO_GEN_DIR} PARENT_SCOPE)
    endif()
endfunction()

# Compile project protobuf files
compile_project_proto_files()

include(GNUInstallDirs)
include(CMakePackageConfigHelpers)

file(GLOB_RECURSE HEADER_FILES "include/*.h")
file(GLOB_RECURSE SOURCE_FILES "src/*.cpp")

# Add generated protobuf files to the source list
if(PROJECT_PROTO_SOURCES)
    list(APPEND SOURCE_FILES ${PROJECT_PROTO_SOURCES})
endif()

add_library(${PROJECT_NAME} ${HEADER_FILES} ${SOURCE_FILES})
#enable_clang_tidy(${PROJECT_NAME})

target_compile_options(${PROJECT_NAME}
    PRIVATE
        $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:AppleClang>,$<CXX_COMPILER_ID:GNU>>:
            -Wall -Wno-unused-variable -Wno-unused-lambda-capture>
)

target_include_directories(${PROJECT_NAME}
    PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
    PRIVATE
        ${Protobuf_INCLUDE_DIRS}
        $<$<BOOL:${PROJECT_PROTO_INCLUDE_DIR}>:${PROJECT_PROTO_INCLUDE_DIR}>
)

target_link_libraries(${PROJECT_NAME} 
    PUBLIC 
        avrocpp
        Boost::headers
        jsoncons
        ${Protobuf_LIBRARIES}
    PRIVATE
        absl::log_internal_log_sink_set
        absl::log_internal_proto
        absl::absl_log
        absl::log_internal_message
        absl::hash
        tink::static
)

configure_package_config_file(${CMAKE_CURRENT_SOURCE_DIR}/Config.cmake.in
    "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
    INSTALL_DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
)

# Enable testing
enable_testing()
add_subdirectory(tests)
